{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///dist/angular2-now.min.js","webpack:///webpack/bootstrap be16a0160cef94d626ce","webpack:///./src/angular2-now.js","webpack:///./src/common.js","webpack:///./src/api/set-module.js","webpack:///./src/api/component.js","webpack:///./src/api/view.js","webpack:///./src/api/inject.js","webpack:///./src/utils.js","webpack:///./src/api/scope-shared.js","webpack:///./src/api/scope-new.js","webpack:///./src/api/controller.js","webpack:///./src/api/service.js","webpack:///./src/api/filter.js","webpack:///./src/api/bootstrap.js","webpack:///./src/api/state.js","webpack:///./src/api/options.js","webpack:///./src/api/meteor-method.js","webpack:///./src/api/meteor-reactive.js","webpack:///./src/api/local-injectables.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","init","_common","common","isCordova","cordova","angularModule","angular","Object","defineProperty","value","_apiSetModule","_apiComponent","_apiScopeShared","_apiScopeNew","_apiView","_apiInject","_apiController","_apiService","_apiFilter","_apiBootstrap","_apiState","_apiOptions","_apiMeteorMethod","_apiMeteorReactive","_apiLocalInjectables","angular2now","SetModule","Component","ScopeShared","ScopeNew","View","Inject","Controller","Service","Filter","bootstrap","State","options","Options","MeteorMethod","MeteorReactive","LocalInjectables","Directive","Injectable","Meteor","undefined","currentModule","currentNameSpace","ng2nOptions","controllerAs","$q","injector","get","arguments","split","length","apply","selector","target","controller","ctrlInstance","toInjectAfter","_len","args","Array","_key","injectedDeps","meteorReactive","$reactive","$scope","attach","slice","$inject","localInjectables","forEach","index","$$init","concat","unshift","deferController","oldproto","prototype","construct","constructor","staticProps","i","hasOwnProperty","link","scope","el","attr","controllers","$dependson","isClass","injectables","_inject","services","_utils","camelCase","unCamelCase","template","templateUrl","transclude","directives","_view","requiredControllers","map","dep","test","push","filter","v","$injectDefer","ddo","bindToController","restrict","replace","require","directive","er","Error","transcludeContent","s","match","toLowerCase","indexOf","deps","name","descriptor","injectable","TypeError","existingInjects","nameSpace","serviceExists","serviceName","getService","moduleName","_invokeQueue","a","b","toUpperCase","service","filterFunc","f","Function","bind","config","onReady","bootOnDocument","document","body","querySelector","bootModule","strictDi","element","on","ready","resolvedServiceName","doResolve","resolves","resolve","keys","$urlRouterProvider","$stateProvider","$locationProvider","localScope","defaultRoute","otherwise","url","html5Mode","userController","sdo","params","abstract","templateProvider","onEnter","onExit","parent","data","state","spinner","show","noop","hide","events","beforeCall","afterCall","noConflict","_setModule","merge","_options","resolver","err","deferred","reject","argv","defer","has","promise"],"mappings":";CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,YAAAD,IAEAD,EAAA,YAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,EAASM,GAE/B,YEZD,SAASS,KACLC,EAAAC,OAAOC,UAA+B,mBAAZC,SAC1BH,EAAAC,OAAOG,cAAgBC,QAAQpB,OFYlCqB,OAAOC,eAAevB,EAAS,cAC3BwB,OAAO,GAGX,IAAIR,GAAUV,EE9DQ,GFgElBmB,EAAgBnB,EE/DK,GFiErBoB,EAAgBpB,EEhEK,GFkErBqB,EAAkBrB,EEjEK,GFmEvBsB,EAAetB,EElEK,GFoEpBuB,EAAWvB,EEnEK,GFqEhBwB,EAAaxB,EEpEK,GFsElByB,EAAiBzB,EErEK,GFuEtB0B,EAAc1B,EEtEK,IFwEnB2B,EAAa3B,EEvEK,IFyElB4B,EAAgB5B,EExEK,IF0ErB6B,EAAY7B,EEzEK,IF2EjB8B,EAAc9B,EE1Ec,IF4E5B+B,EAAmB/B,EE3EK,IF6ExBgC,EAAqBhC,EE5EK,IF8E1BiC,EAAuBjC,EE7EK,IAE3BkC,GACFzB,OAEA0B,UAAShB,EAAAgB,UAETC,UAAShB,EAAAgB,UACTC,YAAWhB,EAAAgB,YACXC,SAAQhB,EAAAgB,SACRC,KAAIhB,EAAAgB,KACJC,OAAMhB,EAAAgB,OACNC,WAAUhB,EAAAgB,WACVC,QAAOhB,EAAAgB,QACPC,OAAMhB,EAAAgB,OACNC,UAAShB,EAAAgB,UACTC,MAAKhB,EAAAgB,MAELC,QAAOhB,EAAAgB,QACPC,QAAOjB,EAAAiB,QAEPC,aAAYjB,EAAAiB,aACZC,eAAcjB,EAAAiB,eACdC,iBAAgBjB,EAAAiB,iBAEhBC,UAAS/B,EAAAgB,UACTgB,WAAU1B,EAAAgB,QAQO,oBAAXW,SACR5C,IFgFDf,EAAQ,WE7EMwC,EF8EdvC,EAAOD,QAAUA,EAAQ,YAIpB,SAASC,EAAQD,GAEtB,YAEAsB,QAAOC,eAAevB,EAAS,cAC7BwB,OAAO,GG5IH,IAAMP,IACXG,cAAewC,OACfC,cAAeD,OACfE,iBAAkBF,OAClB1C,WAAW,EACX6C,aACEF,cAAa,WACX,MAAO5C,GAAO4C,gBAGlBG,aAAcJ,OACdK,GAAI5C,QAAQ6C,UAAU,OAAOC,IAAI,MHgJlCnE,GAAQiB,OAASA,GAIZ,SAAShB,EAAQD,EAASM,GAE/B,YI/JM,SAASmC,KAyBd,MAdAzB,GAAAC,OAAO4C,cAAgBO,UAAU,GAAGC,MAAM,KAEN,IAAhCrD,EAAAC,OAAO4C,cAAcS,OAEvBtD,EAAAC,OAAO4C,cAAgB7C,EAAAC,OAAO4C,cAAc,IAG5C7C,EAAAC,OAAO6C,iBAAmB9C,EAAAC,OAAO4C,cAAc,GAC/C7C,EAAAC,OAAO4C,cAAgB7C,EAAAC,OAAO4C,cAAc,GAG5CO,UAAU,GAAKpD,EAAAC,OAAO4C,eAGjB7C,EAAAC,OAAOG,cAAcmD,MAAMlD,QAAS+C,WJwI5C9C,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQyC,UAAYA,CAEpB,IAAIzB,GAAUV,EIxKQ,IJwMjB,SAASL,EAAQD,EAASM,GAE/B,YKrLM,SAASoC,GAAUU,GASxB,MARAA,GAAUA,MAEa,gBAAZA,KACTA,GACEoB,SAAUpB,IAIP,SAASqB,GA6Gd,QAASC,KLwNN,IAAK,GKvNAC,GAAevE,KACjBwE,KLsNMC,EAAOT,UAAUE,OKxNNQ,EAAIC,MAAAF,GAAAG,EAAA,EAAAH,EAAAG,MAAJF,EAAIE,GAAAZ,UAAAY,EAGzB,IAAIC,GAAeH,CAEnB,IAAIL,EAAOS,eAAgB,CAEzB,GAAMC,GAAYF,EAAa,GACzBG,EAASH,EAAa,EAE5BE,GAAUR,GAAcU,OAAOD,GAE/BR,EAAgBK,EAAaK,MAAM,EAAG,GACtCL,EAAeA,EAAaK,MAAM,GAClCb,EAAOc,QAAUd,EAAOc,QAAQD,MAAM,GAEpCb,EAAOe,kBACTf,EAAOc,QAAQE,QAAQ,SAASjE,EAAOkE,GACrCf,EAAanD,GAASyD,EAAaS,KAKvCtF,KAAKuF,OAAOpB,MAAMnE,KAAM6E,GAEpBL,EAAcN,OAAS,IACzBG,EAAOc,SAAW,YAAa,UAAUK,OAAOnB,EAAOc,SACvDN,EAAaY,QAAQjB,EAAc,IACnCK,EAAaY,QAAQjB,EAAc,KAYvC,QAASkB,GAAiBrB,EAAQC,GAEhC,GAAMqB,GAAWtB,EAAOuB,UAElBC,EAAYxB,EAAOuB,UAAUE,YAE7BC,IAEN,KAAK,GAAIC,KAAK3B,GACRA,EAAO4B,eAAeD,KACxBD,EAAYC,GAAK3B,EAAO2B,GAI5B3B,GAASC,EAETD,EAAOuB,UAAYD,CAEnB,KAAK,GAAIK,KAAKD,GACZ1B,EAAO2B,GAAKD,EAAYC,EAO1B,OAHA3B,GAAOuB,UAAUL,OAASM,EAGnBxB,EAGT,QAAS6B,GAAKC,EAAOC,EAAIC,EAAMC,GAMzBA,EAAY,GAAGC,YACjBD,EAAY,GAAGC,WAAWpC,MAAMmC,EAAY,GAAIA,EAAYpB,MAAM,IAxLtE,GAAIsB,IAAU,CAIdnC,GAASqB,EAAgBrB,EAAQC,GAG7BtB,EAAQyD,aAAezD,EAAQyD,sBAAuB9B,SACxDN,GAAS,EAAAqC,EAAAhE,QAAOM,EAAQyD,aAAapC,IAGnCrB,EAAQ2D,UAAY3D,EAAQ2D,mBAAoBhC,SAClDN,GAAS,EAAAqC,EAAAhE,QAAOM,EAAQ2D,UAAUtC,IAIpCrB,EAAQoB,UAAW,EAAAwC,EAAAC,WAAU7D,EAAQoB,UAAY,IAAM,GAC3B,MAAxBpB,EAAQoB,SAAS,KACnBoC,GAAU,EACVxD,EAAQoB,SAAWpB,EAAQoB,SAASc,MAAM,IAG5Cb,EAAOD,UAAW,EAAAwC,EAAAE,aAAY9D,EAAQoB,WAIlCpB,EAAQ+D,UAAY/D,EAAQgE,aAAehE,EAAQiE,YAAcjE,EAAQkE,cAC3E,EAAAC,EAAA1E,MAAKO,GAASqB,GAIhBrB,EAAQ+D,SAAW1C,EAAO0C,UAAYvD,OACtCR,EAAQgE,YAAc3C,EAAO2C,aAAexD,MAM5C,IAAM4D,IAAuBpE,EAAQoB,SAErCC,GAAOc,QAAUd,EAAOc,YACxBd,EAAOc,QAAUd,EAAOc,QAAQkC,IAAI,SAASC,GAK3C,MAJI,aAAaC,KAAKD,EAAI,MACxBF,EAAoBI,KAAK,IAAMF,EAAIpC,MAAM,IACzCoC,EAAM,aAEDA,IAITjD,EAAOc,QAAUd,EAAOc,QAAQsC,OAAO,SAASC,GAC9C,MAAa,cAANA,IAGLrD,EAAOS,iBAETT,EAAOc,QAAQM,QAAQ,UACvBpB,EAAOc,QAAQM,QAAQ,cAOzBpB,EAAOsD,aAAetD,EAAOc,WAG7B,IAAMyC,IACJhE,aAAcZ,EAAQY,cAAgBhD,EAAAC,OAAO+C,cAAgBS,EAAOT,cAAgBZ,EAAQoB,SAC5FyD,iBAAqD,iBAA5BxD,GAAOwD,iBAAiCxD,EAAOwD,kBAAmB,EAC3FC,SAAW9E,EAAQ+D,SAAW/D,EAAQgE,YAAe,KAAOR,EAAU,IAAM,IAC5EL,SACAY,SAAU/D,EAAQ+D,SAClBC,YAAahE,EAAQgE,YACrB1C,WAAYD,EACZ0D,QAAS/E,EAAQ+E,UAAW,EAC5Bd,WAAY,iBAAiBM,KAAKvE,EAAQ+D,WAAa1C,EAAO4C,WAC9De,QAAShF,EAAQgF,SAAW3D,EAAO2D,SAAWZ,EAC9ClB,KAAMlD,EAAQkD,MAAQ7B,EAAO6B,MAAQA,EAInClD,GAAQ8E,WACVF,EAAIE,SAAW9E,EAAQ8E,UAGrBzD,EAAO4B,eAAe,SACxB2B,EAAIzB,MAAQ9B,EAAO8B,MACVnD,EAAQiD,eAAe,SAChC2B,EAAIzB,MAAQnD,EAAQmD,MACXnD,EAAc,OACvB4E,EAAIzB,MAAQnD,EAAc,KAI5B,KACE/B,QAAQpB,OAAOe,EAAAC,OAAO4C,eACnBwE,UAAUjF,EAAQoB,SAAU,WLmN5B,MKnNkCwD,KACrC,MAAOM,GACP,KAAM,IAAIC,OAAM,gBAAkBvH,EAAAC,OAAO4C,cAAgB,iEAG3D,MAAOY,ILuEVnD,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQ0C,UAAYA,CAEpB,IAAI6E,GAAQjH,EKjNQ,GLmNhBwG,EAAUxG,EKlNQ,GLoNlBU,EAAUV,EKnNQ,GLqNlB0G,EAAS1G,EKpNyB,ILqbjC,SAASL,EAAQD,GAEtB,YM1bM,SAAS6C,GAAKO,GA6BnB,QAASoF,GAAkBrB,GACzB,GAAMsB,IAAKtB,GAAY,IAAIuB,MAAM,yBAMjC,OAJID,IAAqD,KAAhDA,EAAE,GAAGE,cAAcC,QAAQ,mBAClCzB,EAAWA,EAASgB,QAAQ,aAAc,2BAGrChB,EA1BT,MATA/D,GAAUA,MAEa,gBAAZA,KACTA,GACEgE,YAAahE,IAKV,SAASqB,GAcd,MAbAA,GAAO0C,SAAW/D,EAAQ+D,UAAY1C,EAAO0C,SAC7C1C,EAAO2C,YAAchE,EAAQgE,aAAe3C,EAAO2C,YAGnD3C,EAAO4C,WAAajE,EAAQiE,YAAc5C,EAAO4C,WAGjD5C,EAAO6C,WAAalE,EAAQkE,YAAc7C,EAAO6C,WAG7C7C,EAAO0C,WACT1C,EAAO0C,SAAWqB,EAAkB/D,EAAO0C,WAEtC1C,GNoaVnD,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQ6C,KAAOA,GA0CV,SAAS5C,EAAQD,EAASM,GAE/B,YOheM,SAASwC,KPsfb,IAAK,GOrfF+F,GAAIjF,OPqfEiB,EAAOT,UAAUE,OOtfHQ,EAAIC,MAAAF,GAAAG,EAAA,EAAAH,EAAAG,MAAJF,EAAIE,GAAAZ,UAAAY,EAS5B,IALE6D,EADE/D,EAAK,YAAcC,OACdD,EAAK,GAELA,EAGW,IAAhB+D,EAAKvE,OACP,KAAM,IAAIiE,OAAM,qCAGlB,OAAO,UAAS9D,EAAQqE,EAAMC,GAC5B,GAAIC,GAAavE,CAMjB,IAJIsE,IACFC,EAAaD,EAAWvH,QAGrBwH,EACH,KAAM,IAAIC,WAAU,0DAGtB,IAAMC,GAAkBF,EAAWzD,OAoBnC,OAlBAyD,GAAWzD,WAEXsD,EAAKpD,QAAQ,SAACiC,GAGG,MAAXA,EAAI,IAAyB,MAAXA,EAAI,IAAmC,KAArBA,EAAIkB,QAAQ,OAClDlB,GAAM,EAAAV,EAAAmC,WAAUzB,IAGsB,KAApCsB,EAAWzD,QAAQqD,QAAQlB,IAC7BsB,EAAWzD,QAAQqC,KAAKF,KAIxBwB,IACFF,EAAWzD,QAAUyD,EAAWzD,QAAQK,OAAOsD,IAG1CH,GAActE,GPsbxBnD,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQ8C,OAASA,CAEjB,IAAIkE,GAAS1G,EOlfY,IPojBpB,SAASL,EAAQD,EAASM,GAE/B,YQljBM,SAAS6I,GAAUL,GACxB,MAAO9H,GAAAC,OAAO6C,iBAAmB9C,EAAAC,OAAO6C,iBAAmB,IAAMgF,EAAOA,EAInE,QAASM,GAAcC,GAC1B,QAASC,EAAWD,GAGjB,QAASC,GAAWD,EAAaE,GACpC,MAAOlI,SAAQpB,OAAOsJ,GAAcvI,EAAAC,OAAO4C,eACtC2F,aACA3B,OAAO,SAACC,EAAG1B,GRkkBX,MQlkB0B,aAAT0B,EAAE,IAAqBA,EAAE,GAAG,KAAOuB,IAAa,GAGnE,QAASpC,GAAUwB,GACtB,MAAOA,GAAEN,QAAQ,QAAS,SAACsB,EAAGC,GRokBzB,MQpkB+BA,GAAEC,gBAGnC,QAASzC,GAAYrG,GACxB,GAAM4H,GAAI5H,EAAEsH,QAAQ,WAAY,OACtBA,QAAQ,MAAO,KACfQ,aAEV,OAAa,MAATF,EAAE,GACGA,EAAEnD,MAAM,GAGVmD,ERwhBVnH,OAAOC,eAAevB,EAAS,cAC3BwB,OAAO,IAEXxB,EAAQmJ,UAAYA,EACpBnJ,EAAQoJ,cAAgBA,EACxBpJ,EAAQsJ,WAAaA,EACrBtJ,EAAQiH,UAAYA,EACpBjH,EAAQkH,YAAcA,CAEtB,IAAIlG,GAAUV,EQjkBQ,IRwmBjB,SAASL,EAAQD,GAQtB,YS1mBM,SAAS2C,GAAY8B,GAE1B,MADAA,GAAO8B,MAAQ3C,OACRa,ET0mBRnD,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQ2C,YAAcA,GASjB,SAAS1C,EAAQD,GAItB,YUhoBM,SAAS4C,GAAS6B,GAEvB,MADAA,GAAO8B,OAAQ,EACR9B,EVgoBRnD,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQ4C,SAAWA,GASd,SAAS3C,EAAQD,EAASM,GAE/B,YW/oBM,SAASyC,GAAWK,GAMvB,MALAA,GAAUA,MAEa,gBAAZA,KACPA,GAAY0F,KAAM1F,IAEf,SAAUqB,GAIb,MAHApD,SAAQpB,OAAOe,EAAAC,OAAO4C,eACjBa,YAAW,EAAAsC,EAAAmC,WAAU/F,EAAQ0F,MAAOrE,GAElCA,GXuoBdnD,OAAOC,eAAevB,EAAS,cAC3BwB,OAAO,IAEXxB,EAAQ+C,WAAaA,CAErB,IAAI/B,GAAUV,EWzpBQ,GX2pBlB0G,EAAS1G,EW1pBY,IX0qBpB,SAASL,EAAQD,EAASM,GAE/B,YY1qBM,SAAS0C,GAAQI,GAQtB,MAPAA,GAAUA,MAEa,gBAAZA,KACTA,GACE0F,KAAM1F,IAGH,SAASqB,GAKd,MAJApD,SAAQpB,OAAOe,EAAAC,OAAO4C,eACnB+F,SAAQ,EAAA5C,EAAAmC,WAAU/F,EAAQ0F,MAAOrE,GAG7BA,GZ+pBVnD,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQgD,QAAUA,CAElB,IAAIhC,GAAUV,EYprBQ,GZsrBlB0G,EAAS1G,EYrrBY,IZwsBpB,SAASL,EAAQD,EAASM,GAE/B,YaxsBM,SAAS2C,GAAOG,GAQrB,MAPAA,GAAUA,MAEa,gBAAZA,KACTA,GACE0F,KAAM1F,IAGH,SAASqB,GAMd,QAASoF,KACP,GAAM/E,GAAOC,MAAMiB,UAAUV,MAAM3E,KAAKyD,WAClC0F,EAAI,IAAIC,SAAS/D,UAAUgE,KAAKzF,MAAME,GAAS,MAAMmB,OAAOd,IAElE,OAAOgF,GAGT,MAZAD,GAAWtE,QAAUd,EAAOc,QAE5BlE,QAAQpB,OAAOe,EAAAC,OAAO4C,eACnBgE,QAAO,EAAAb,EAAAmC,WAAU/F,EAAQ0F,MAAOe,GAS5BpF,GbqrBVnD,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQiD,OAASA,CAEjB,IAAIjC,GAAUV,EaltBQ,GbotBlB0G,EAAS1G,EantBY,Ib8uBpB,SAASL,EAAQD,EAASM,GAE/B,YcruBM,SAAS4C,GAAUuB,EAAQwF,GAoChC,QAASC,KACP,GAAI1D,GAAE5C,MAQJ4C,GALG2D,EAKEC,SAASC,KAJTD,SAASE,cAAc7F,EAAOD,UAOrCnD,QAAQ6B,UAAUsD,GAAK+D,GAAaN,GA/CtC,GAAIE,IAAiB,IAEhB1F,GAAWA,IAAWA,EAAOD,UAA8B,kBAAXC,MACnDA,GACED,SAAUxD,EAAAC,OAAO4C,eAEnBsG,GAAiB,GAIG,gBAAX1F,KACTA,GACED,SAAUC,IAMdA,EAAOvB,WAAY,CAEnB,IAAMqH,GAAa9F,EAAOD,UAAYxD,EAAAC,OAAO4C,aAEzC0G,KAAevJ,EAAAC,OAAO4C,eACxBxC,QAAQpB,OAAOsK,GAEZN,IACHA,GACEO,UAAU,IAGVxJ,EAAAC,OAAOC,UACTG,QAAQoJ,QAAQL,UAAUM,GAAG,cAAeR,GAE5C7I,QAAQoJ,QAAQL,UAAUO,MAAMT,GdqsBnC5I,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQkD,UAAYA,CAEpB,IAAIlC,GAAUV,EcxvBQ,IdszBjB,SAASL,EAAQD,EAASM,GAE/B,YelxBM,SAAS6C,GAAMC,GAEpB,KAAKA,GAAaA,YAAmB9B,SAA4BsC,SAAjBR,EAAQ0F,MACtD,KAAM,IAAIP,OAAM,gIAGlB,OAAO,UAAS9D,GAEd,GAAIoE,GAAIjF,OACFgH,GAAsB,EAAA5D,EAAAmC,YAAU,EAAAnC,EAAAC,WAAUxC,EAAOD,WAAapB,EAAQ0F,KAAO,IAAIX,QAAQ,IAAK,OAGhG0C,GAAY,EAIVC,EAAW1H,EAAQ2H,SAAWtG,EAAOsG,OAuJ3C,OApJID,IAAYA,YAAoBxJ,UAAWuH,EAAOvH,OAAO0J,KAAKF,IAAWxG,SAC3EuG,GAAY,GAKVA,KACG,EAAA7D,EAAAoC,eAAcwB,IACjBvJ,QAAQpB,OAAOe,EAAAC,OAAO4C,eAAerC,MAAMoJ,OAK/CvJ,QAAQpB,OAAOe,EAAAC,OAAO4C,eACnBoG,QAAQ,qBAAsB,iBAAkB,oBAC/C,SAASgB,EAAoBC,EAAgBC,GAoH3C,QAASzG,KfyzBV,IAAK,GAAIG,GAAOT,UAAUE,OezzBFQ,EAAIC,MAAAF,GAAAG,EAAA,EAAAH,EAAAG,MAAJF,EAAIE,GAAAZ,UAAAY,EAEzB,IAAIoG,GAAatG,EAAK,EAEtBA,GAAOA,EAAKQ,MAAM,GAIlBuD,EAAKvD,MAAM,GAAGG,QAAQ,SAASqC,EAAG1B,GAChCgF,EAAWtD,GAAKhD,EAAKsB,KAxHrBhD,EAAQiI,cACVJ,EAAmBK,UAA2C,gBAAzBlI,GAAQiI,aAA6BjI,EAAQiI,aAAejI,EAAQmI,KAIxE,mBAAtBnI,GAAQoI,WACnBL,EAAkBK,UAAUpI,EAAQoI,UAKtC,IAAMC,GAAiBrI,EAAQsB,aAAgBD,EAAOD,SAAoBZ,OAATa,EAG7DgH,IAAkBA,EAAelG,SAAWkG,EAAelG,QAAQjB,QAAUuE,GAAQA,EAAKvE,QAC5FuE,EAAKpD,QAAQ,SAASiC,GACpB,GAAMtB,GAAIqF,EAAelG,QAAQqD,QAAQ5H,EAAAC,OAAO6C,iBAAmB,IAAM4D,EAE/D,MAANtB,IACFqF,EAAelG,QAAQa,GAAKsB,IAOlC,IAAMgE,IACJH,IAAKnI,EAAQmI,IAIbI,OAAQvI,EAAQuI,OAIhBC,WAAUxI,cAEVgE,YAAahE,EAAQgE,YAYrBD,UAAW1C,EAAO0C,UAAY1C,EAAO2C,eAAiB3C,EAAOvB,WAAauB,EAAOD,SAAWC,EAAOD,SAAS2D,QAAQ,SAAU,aAAe,yBAI7I0D,iBAAkBzI,EAAQyI,iBAG1Bd,QAASD,EAITpG,WAAYmG,EAAYnG,EAAad,OAIrCI,aAAchD,EAAAC,OAAO8C,YAAYsC,eAAe,kBAAoB5B,EAAO4B,eAAe,YAAcrF,EAAAC,OAAO8C,YAAYC,aAAeJ,OAG1IkI,QAAS1I,EAAQ0I,QACjBC,OAAQ3I,EAAQ2I,OAGhBC,OAAQ5I,EAAQ4I,OAGhBC,KAAM7I,EAAQ6I,KAIZ7I,GAAQgE,YACVsE,EAAIvE,SAAW/D,EAAQgE,YACdhE,EAAQyI,iBACjBH,EAAIvE,SAAWvD,OACNR,EAAQ+D,WACjBuE,EAAIvE,SAAW/D,EAAQgE,aAIrBqE,IACFC,EAAIhH,WAAa+G,GAIfhH,EAAOT,aACT0H,EAAI1H,aAAeS,EAAOT,aACjBZ,EAAQY,eACjB0H,EAAI1H,aAAeZ,EAAQY,cAI7BkH,EAAegB,MAAM9I,EAAQ0F,KAAM4C,GAK/Bb,IACFhC,EAAKhD,QAAQ+E,GAEblG,EAAWa,QAAUsD,MAqBtBpE,Gf6mBVnD,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQmD,MAAQA,CAEhB,IAAInC,GAAUV,Ee5zBV,Gf8zBA0G,EAAS1G,Ee1zBT,IfqgCC,SAASL,EAAQD,EAASM,GAE/B,YgBzgCM,SAAS8C,GAAQA,GACtB,MAAKA,IAI+B,mBAAzBA,GAAQY,eACjBhD,EAAAC,OAAO+C,aAAeZ,EAAQY,cAKhChD,EAAAC,OAAO8C,YAAYoI,QAAU/I,EAAQ+I,UACnCC,KAAM/K,QAAQgL,KACdC,KAAMjL,QAAQgL,MAMhBrL,EAAAC,OAAO8C,YAAYwI,OAASnJ,EAAQmJ,SAClCC,WAAYnL,QAAQgL,KACpBI,UAAWpL,QAAQgL,WAQa,mBAAvBjJ,GAAQsJ,aACjBrL,QAAQpB,OAASmD,EAAQsJ,WAAa1L,EAAAC,OAAOG,cAAauL,EAAAlK,aA5BnDzB,EAAAC,OAAO8C,YAgCX,QAASV,GAAQD,GACtB,MAAO,UAASqB,GAEd,MADApD,SAAQuL,MAAM5L,EAAAC,OAAO8C,YAAaX,GAC3BqB,GhBs+BVnD,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQoD,QAAUA,EAClBpD,EAAQqD,QAAUA,CAElB,IAAIrC,GAAUV,EgBthCQ,GhBwhClBqM,EAAarM,EgBvhCQ,IhBukCpB,SAASL,EAAQD,EAASM,GAE/B,YiBvkCM,SAASgD,GAAauJ,GAC3B,GAAMzJ,GAAU/B,QAAQuL,SAAU5L,EAAAC,OAAO8C,YAAa8I,GAClDV,EAAU/I,EAAQ+I,UACpBC,KAAM/K,QAAQgL,KACdC,KAAMjL,QAAQgL,MAEVE,EAASnJ,EAAQmJ,SACrBC,WAAYnL,QAAQgL,KACpBI,UAAWpL,QAAQgL,KAGrB,OAAO,UAAS5H,EAAQqE,EAAMC,GAkD5B,MA/CAA,GAAWvH,MAAQ,WAsCjB,QAASsL,GAASC,EAAKd,GACjBc,EACFC,EAASC,OAAOF,GAEhBC,EAASjC,QAAQkB,GAzCrB,GAAMiB,GAAOnI,MAAMiB,UAAUV,MAAM3E,KAAKyD,WAClC4I,EAAWhM,EAAAC,OAAOgD,GAAGkJ,OAE3B,IAAuB,gBAAZhB,GAAsB,CAC/B,IAAI9K,QAAQ6C,UAAU,KAAMlD,EAAAC,OAAO4C,gBAAgBuJ,IAAIhK,EAAQ+I,SAI7D,KAAM,IAAI5D,OAAM,YAAc4D,EAAU,oBAHxCA,GAAU9K,QAAQ6C,UAAU,KAAMlD,EAAAC,OAAO4C,gBAAgBM,IAAIf,EAAQ+I,SACrE/I,EAAQ+I,QAAUA,EA6BtB,MAxBAe,GAAKrH,QAAQiD,GACboE,EAAKtF,KAAKkF,GAENX,GACFA,EAAQC,OAGNG,EAAOC,YACTD,EAAOC,aAKT7I,OAAOhD,KAAK4D,MAAMnE,KAAM8M,GAExBF,EAASK,QAAO,WAAS,WACvBlB,EAAQG,OAEJC,EAAOE,WACTF,EAAOE,cAKJO,EAASK,SAWXtE,GjB4gCVzH,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQsD,aAAeA,CAEvB,IAAItC,GAAUV,EiBjlCQ,IjBspCjB,SAASL,EAAQD,GAItB,YkBxpCM,SAASuD,GAAekB,GAE7B,MADAA,GAAOS,gBAAiB,EACjBT,ElBwpCRnD,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQuD,eAAiBA,GASpB,SAAStD,EAAQD,GAEtB,YmB1qCM,SAASwD,GAAiBiB,GAE/B,MADAA,GAAOe,kBAAmB,EACnBf,EnB0qCRnD,OAAOC,eAAevB,EAAS,cAC7BwB,OAAO,IAETxB,EAAQwD,iBAAmBA","file":"dist/angular2-now.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular2now\"] = factory();\n\telse\n\t\troot[\"angular2now\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular2now\"] = factory();\n\telse\n\t\troot[\"angular2now\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _apiSetModule = __webpack_require__(2);\n\t\n\tvar _apiComponent = __webpack_require__(3);\n\t\n\tvar _apiScopeShared = __webpack_require__(7);\n\t\n\tvar _apiScopeNew = __webpack_require__(8);\n\t\n\tvar _apiView = __webpack_require__(4);\n\t\n\tvar _apiInject = __webpack_require__(5);\n\t\n\tvar _apiController = __webpack_require__(9);\n\t\n\tvar _apiService = __webpack_require__(10);\n\t\n\tvar _apiFilter = __webpack_require__(11);\n\t\n\tvar _apiBootstrap = __webpack_require__(12);\n\t\n\tvar _apiState = __webpack_require__(13);\n\t\n\tvar _apiOptions = __webpack_require__(14);\n\t\n\tvar _apiMeteorMethod = __webpack_require__(15);\n\t\n\tvar _apiMeteorReactive = __webpack_require__(16);\n\t\n\tvar _apiLocalInjectables = __webpack_require__(17);\n\t\n\tvar angular2now = {\n\t    init: init,\n\t\n\t    SetModule: _apiSetModule.SetModule,\n\t\n\t    Component: _apiComponent.Component,\n\t    ScopeShared: _apiScopeShared.ScopeShared,\n\t    ScopeNew: _apiScopeNew.ScopeNew,\n\t    View: _apiView.View,\n\t    Inject: _apiInject.Inject,\n\t    Controller: _apiController.Controller,\n\t    Service: _apiService.Service,\n\t    Filter: _apiFilter.Filter,\n\t    bootstrap: _apiBootstrap.bootstrap,\n\t    State: _apiState.State,\n\t\n\t    options: _apiOptions.options,\n\t    Options: _apiOptions.Options,\n\t\n\t    MeteorMethod: _apiMeteorMethod.MeteorMethod,\n\t    MeteorReactive: _apiMeteorReactive.MeteorReactive,\n\t    LocalInjectables: _apiLocalInjectables.LocalInjectables,\n\t\n\t    Directive: _apiComponent.Component,\n\t    Injectable: _apiService.Service\n\t};\n\t\n\tfunction init() {\n\t    _common.common.isCordova = typeof cordova !== 'undefined';\n\t    _common.common.angularModule = angular.module;\n\t}\n\t\n\tif (typeof Meteor === 'undefined') {\n\t    init();\n\t}\n\t\n\texports['default'] = angular2now;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar common = {\n\t  angularModule: undefined,\n\t  currentModule: undefined,\n\t  currentNameSpace: undefined,\n\t  isCordova: false,\n\t  ng2nOptions: {\n\t    currentModule: function currentModule() {\n\t      return common.currentModule;\n\t    }\n\t  },\n\t  controllerAs: undefined,\n\t  $q: angular.injector(['ng']).get('$q')\n\t};\n\texports.common = common;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.SetModule = SetModule;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tfunction SetModule() {\n\t  /**\n\t   * Name-spacing applies to provider names, not modules. Each module\n\t   * has to have a unique name of it's own.\n\t   *\n\t   * A namespace may be specified like this:\n\t   *     SetModule('ftdesiree:helpers')\n\t   * The namespace, once set, will remain in force until removed.\n\t   * Remove the namespace like this:\n\t   *     angular.module(':helpers')\n\t   **/\n\t  _common.common.currentModule = arguments[0].split(':');\n\t\n\t  if (_common.common.currentModule.length === 1) {\n\t    // No namespace, just the module name\n\t    _common.common.currentModule = _common.common.currentModule[0];\n\t  } else {\n\t    // Split off the name-space and module name\n\t    _common.common.currentNameSpace = _common.common.currentModule[0];\n\t    _common.common.currentModule = _common.common.currentModule[1];\n\t\n\t    // Reassign arguments[0] without the namespace\n\t    arguments[0] = _common.common.currentModule;\n\t  }\n\t\n\t  return _common.common.angularModule.apply(angular, arguments);\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.Component = Component;\n\t\n\tvar _view = __webpack_require__(4);\n\t\n\tvar _inject = __webpack_require__(5);\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _utils = __webpack_require__(6);\n\t\n\t//function Directive(options) {\n\t//\n\t//    // A string passed is assumed to be the attribute name of the directive.\n\t//    if (typeof options === 'string')\n\t//        options = { selector: options };\n\t//\n\t//    // Directives have shared scope by default (scope:undefined).\n\t//    // Optionally they can have a new scope created (scope: true).\n\t//    // If you require an isolate scope for your directive then\n\t//    // pass \"scope: { ... }\" in options.\n\t//    if (options && !options.hasOwnProperty('scope'))\n\t//        angular.merge(options, { scope: undefined });\n\t//\n\t//    return Component(options);\n\t//}\n\t\n\tfunction Component(options) {\n\t  options = options || {};\n\t  // Allow shorthand notation of just passing the selector name as a string\n\t  if (typeof options === 'string') {\n\t    options = {\n\t      selector: options\n\t    };\n\t  }\n\t\n\t  return function (target) {\n\t    var isClass = false;\n\t\n\t    // Create a stub controller and substitute it for the target's constructor,\n\t    // so that we can call the target's constructor later, within the link function.\n\t    target = deferController(target, controller);\n\t\n\t    // service injections, which could also have been specified by using @Inject\n\t    if (options.injectables && options.injectables instanceof Array) {\n\t      target = (0, _inject.Inject)(options.injectables)(target);\n\t    }\n\t    // injectables has been renamed to services\n\t    if (options.services && options.services instanceof Array) {\n\t      target = (0, _inject.Inject)(options.services)(target);\n\t    }\n\t\n\t    // Selector name may be prefixed with a '.', in which case \"restrict: 'C'\" will be used\n\t    options.selector = (0, _utils.camelCase)(options.selector || '') + '';\n\t    if (options.selector[0] === '.') {\n\t      isClass = true;\n\t      options.selector = options.selector.slice(1);\n\t    }\n\t    // Save the unCamelCased selector name, so that bootstrap() can use it\n\t    target.selector = (0, _utils.unCamelCase)(options.selector);\n\t\n\t    // template options can be set with Component or with View\n\t    // so, we run View on the passed in options first.\n\t    if (options.template || options.templateUrl || options.transclude || options.directives) {\n\t      (0, _view.View)(options)(target);\n\t    }\n\t\n\t    // The template(Url) can also be passed in from the @View decorator\n\t    options.template = target.template || undefined;\n\t    options.templateUrl = target.templateUrl || undefined;\n\t\n\t    // Build the require array.\n\t    // Our controller needs the same injections as the component's controller,\n\t    // but with the \"@*\" injections renamed to \"$scope\". The link function will pass\n\t    // the \"@*\" injections directly to the component controller.\n\t    var requiredControllers = [options.selector];\n\t\n\t    target.$inject = target.$inject || [];\n\t    target.$inject = target.$inject.map(function (dep) {\n\t      if (/^@[^]{0,2}/.test(dep[0])) {\n\t        requiredControllers.push('?' + dep.slice(1));\n\t        dep = 'delete-me';\n\t      }\n\t      return dep;\n\t    });\n\t\n\t    // Remove all the 'delete-me' entries\n\t    target.$inject = target.$inject.filter(function (v) {\n\t      return v !== 'delete-me';\n\t    });\n\t\n\t    if (target.meteorReactive) {\n\t      // Prepend angular-meteor injectables\n\t      target.$inject.unshift('$scope');\n\t      target.$inject.unshift('$reactive');\n\t    }\n\t\n\t    // Remember the original $inject, as it will be needed in the link function.\n\t    // In the link function we will receive any requested component controllers\n\t    // which we will then inject into the arguments that we will pass to the\n\t    // actual constructor of our component.\n\t    target.$injectDefer = target.$inject || [];\n\t\n\t    // Create the angular directive\n\t    var ddo = {\n\t      controllerAs: options.controllerAs || _common.common.controllerAs || target.controllerAs || options.selector,\n\t      bindToController: typeof target.bindToController === 'boolean' ? target.bindToController : true,\n\t      restrict: options.template + options.templateUrl ? 'EA' : isClass ? 'C' : 'A',\n\t      scope: {},\n\t      template: options.template,\n\t      templateUrl: options.templateUrl,\n\t      controller: target,\n\t      replace: options.replace || false,\n\t      transclude: /ng-transclude/i.test(options.template) || target.transclude,\n\t      require: options.require || target.require || requiredControllers,\n\t      link: options.link || target.link || link\n\t    };\n\t\n\t    // ddo's restrict\n\t    if (options.restrict) {\n\t      ddo.restrict = options.restrict;\n\t    }\n\t    // ddo's scope\n\t    if (target.hasOwnProperty('scope')) {\n\t      ddo.scope = target.scope;\n\t    } else if (options.hasOwnProperty('scope')) {\n\t      ddo.scope = options.scope;\n\t    } else if (options['bind']) {\n\t      ddo.scope = options['bind'];\n\t    }\n\t\n\t    try {\n\t      angular.module(_common.common.currentModule).directive(options.selector, function () {\n\t        return ddo;\n\t      });\n\t    } catch (er) {\n\t      throw new Error('Does module \"' + _common.common.currentModule + '\" exist? You may need to use angular.module(\"youModuleName\").');\n\t    }\n\t\n\t    return target;\n\t\n\t    // The stub controller below saves injected objects, so we can re-inject them\n\t    // into the \"real\" controller when the link function executes.\n\t    // This allows me to add stuff to the controller and it's \"this\", which is required\n\t    // for some future functionality.\n\t    function controller() {\n\t      var ctrlInstance = this;\n\t      var toInjectAfter = [];\n\t\n\t      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t        args[_key] = arguments[_key];\n\t      }\n\t\n\t      var injectedDeps = args;\n\t\n\t      if (target.meteorReactive) {\n\t        // Get injected angular-meteor objects\n\t        var $reactive = injectedDeps[0];\n\t        var $scope = injectedDeps[1];\n\t\n\t        $reactive(ctrlInstance).attach($scope);\n\t\n\t        toInjectAfter = injectedDeps.slice(0, 2);\n\t        injectedDeps = injectedDeps.slice(2);\n\t        target.$inject = target.$inject.slice(2);\n\t      }\n\t      if (target.localInjectables) {\n\t        target.$inject.forEach(function (value, index) {\n\t          ctrlInstance[value] = injectedDeps[index];\n\t        });\n\t      }\n\t      // Call the original constructor, which is now called $$init, injecting all the\n\t      // dependencies requested.\n\t      this.$$init.apply(this, injectedDeps);\n\t\n\t      if (toInjectAfter.length > 0) {\n\t        target.$inject = ['$reactive', '$scope'].concat(target.$inject);\n\t        injectedDeps.unshift(toInjectAfter[1]);\n\t        injectedDeps.unshift(toInjectAfter[0]);\n\t      }\n\t    }\n\t    // This function allows me to replace a component's \"real\" constructor with my own.\n\t    // I do this, because I want to decorate the $scope and this before instantiating\n\t    // the class's original controller. Also, this enables me to inject\n\t    // other component's controllers into the constructor, the same way as you would\n\t    // inject a service.\n\t    // The component's original constructor is assigned to the init method of the\n\t    // component's class, so that when it executes it will run in the original scope and\n\t    // closures that it was defined in. It is the init method that is called within the\n\t    // link function.\n\t    function deferController(target, controller) {\n\t      // Save the original prototype\n\t      var oldproto = target.prototype;\n\t      // Save the original constructor, so we can call it later\n\t      var construct = target.prototype.constructor;\n\t      // Save any static properties\n\t      var staticProps = {};\n\t\n\t      for (var i in target) {\n\t        if (target.hasOwnProperty(i)) {\n\t          staticProps[i] = target[i];\n\t        }\n\t      }\n\t      // Assign a new constructor, which holds the injected deps.\n\t      target = controller;\n\t      // Restore the original prototype\n\t      target.prototype = oldproto;\n\t      // Restore saved static properties\n\t      for (var i in staticProps) {\n\t        target[i] = staticProps[i];\n\t      }\n\t      // Store the original constructor under the name $$init,\n\t      // which we will call in the link function.\n\t      target.prototype.$$init = construct;\n\t      // Hide $$init from the user's casual inspections of the controller\n\t      //Object.defineProperty(target.prototype, \"$$init\", {enumerable: false})\n\t      return target;\n\t    }\n\t\n\t    function link(scope, el, attr, controllers) {\n\t      // Create a service with the same name as the selector\n\t      // That holds a reference to our component\n\t      //angular.module(currentModule).value(camelCase(target.selector), controllers[0]);\n\t\n\t      // Alternate syntax for the injection of other component's controllers\n\t      if (controllers[0].$dependson) {\n\t        controllers[0].$dependson.apply(controllers[0], controllers.slice(1));\n\t      }\n\t    }\n\t  };\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.View = View;\n\t\n\tfunction View(options) {\n\t  options = options || {};\n\t  // Allow shorthand notation of just passing the templateUrl as a string\n\t  if (typeof options === 'string') options = {\n\t    templateUrl: options\n\t  };\n\t\n\t  //if (!options.template) options.template = undefined;\n\t\n\t  return function (target) {\n\t    target.template = options.template || target.template;\n\t    target.templateUrl = options.templateUrl || target.templateUrl;\n\t\n\t    // When a templateUrl is specified in options, then transclude can also be specified\n\t    target.transclude = options.transclude || target.transclude;\n\t\n\t    // directives is an array of child directive controllers (Classes)\n\t    target.directives = options.directives || target.directives;\n\t\n\t    // Check for the new <content> tag and add ng-transclude to it, if not there.\n\t    if (target.template) target.template = transcludeContent(target.template);\n\t\n\t    return target;\n\t  };\n\t\n\t  // If template contains the new <content> tag then add ng-transclude to it.\n\t  // This will be picked up in @Component, where ddo.transclude will be set to true.\n\t  function transcludeContent(template) {\n\t    var s = (template || '').match(/\\<content[ >]([^\\>]+)/i);\n\t\n\t    if (s && s[1].toLowerCase().indexOf('ng-transclude') === -1) {\n\t      template = template.replace(/\\<content/i, '<content ng-transclude');\n\t    }\n\t\n\t    return template;\n\t  }\n\t}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.Inject = Inject;\n\t\n\tvar _utils = __webpack_require__(6);\n\t\n\t// 2015-09-01 Replaced the whole Inject function with a new more flexible version.\n\t// Thanks to Steven Weingärtner for his code, which works with both Classes and Methods,\n\t// as well as preserving injectables from a parent class (when extending a parent class).\n\t// New features:\n\t// - Dependencies can be passed in as arguments, not requiring the array wrapper. The\n\t//   original syntax with the array wrapper is still supported.\n\t// - Methods of a class can now be Injected also\n\t// - Child classes will inherit the parent class's injectables, which will be appended\n\t//   to the end of the child's dependencies\n\t\n\tfunction Inject() {\n\t  var deps = undefined;\n\t\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (args[0] instanceof Array) {\n\t    deps = args[0];\n\t  } else {\n\t    deps = args;\n\t  }\n\t\n\t  if (deps.length === 0) {\n\t    throw new Error('@Inject: No dependencies passed in');\n\t  }\n\t\n\t  return function (target, name, descriptor) {\n\t    var injectable = target;\n\t\n\t    if (descriptor) {\n\t      injectable = descriptor.value;\n\t    }\n\t\n\t    if (!injectable) {\n\t      throw new TypeError('@Inject can only be used with classes or class methods.');\n\t    }\n\t\n\t    var existingInjects = injectable.$inject;\n\t\n\t    injectable.$inject = [];\n\t\n\t    deps.forEach(function (dep) {\n\t      // Namespace any injectables without an existing nameSpace prefix and also\n\t      // not already prefixed with '$', '@' or '@^'.\n\t      if (dep[0] !== '$' && dep[0] !== '@' && dep.indexOf('_') === -1) {\n\t        dep = (0, _utils.nameSpace)(dep);\n\t      }\n\t\n\t      if (injectable.$inject.indexOf(dep) === -1) {\n\t        injectable.$inject.push(dep);\n\t      }\n\t    });\n\t\n\t    if (existingInjects) {\n\t      injectable.$inject = injectable.$inject.concat(existingInjects);\n\t    }\n\t\n\t    return descriptor || target;\n\t  };\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.nameSpace = nameSpace;\n\texports.serviceExists = serviceExists;\n\texports.getService = getService;\n\texports.camelCase = camelCase;\n\texports.unCamelCase = unCamelCase;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\t// Create a new name from the concatenation of\n\t// the currentNameSpace and the name argument\n\t\n\tfunction nameSpace(name) {\n\t    return _common.common.currentNameSpace ? _common.common.currentNameSpace + '_' + name : name;\n\t}\n\t\n\t// Does a provider with a specific name exist in the current module\n\t\n\tfunction serviceExists(serviceName) {\n\t    return !!getService(serviceName);\n\t}\n\t\n\tfunction getService(serviceName, moduleName) {\n\t    return angular.module(moduleName || _common.common.currentModule)._invokeQueue.filter(function (v, i) {\n\t        return v[0] === '$provide' && v[2][0] === serviceName;\n\t    })[0];\n\t}\n\t\n\tfunction camelCase(s) {\n\t    return s.replace(/-(.)/g, function (a, b) {\n\t        return b.toUpperCase();\n\t    });\n\t}\n\t\n\tfunction unCamelCase(c) {\n\t    var s = c.replace(/([A-Z])/g, '-$1').replace(/--/g, '-').toLowerCase();\n\t\n\t    if (s[0] === '-') {\n\t        return s.slice(1);\n\t    }\n\t\n\t    return s;\n\t}\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t// Cancels out the automatic creation of isolate scope for the directive,\n\t// because Angular 1.x allows only one isolate scope directive per element.\n\t// This is useful when actually creating directives, which add behaviour\n\t// to an existing element, as opposed to components which are stand alone\n\t// bits of html and behaviour.\n\t// The other way to do this is to pass \"scope: undefined\" to @Component.\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ScopeShared = ScopeShared;\n\t\n\tfunction ScopeShared(target) {\n\t  target.scope = undefined;\n\t  return target;\n\t}\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t// Requests a new scope to be created when the directive is created.\n\t// The other way to do this is to pass \"scope: true\" to @Component.\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ScopeNew = ScopeNew;\n\t\n\tfunction ScopeNew(target) {\n\t  target.scope = true;\n\t  return target;\n\t}\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.Controller = Controller;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _utils = __webpack_require__(6);\n\t\n\tfunction Controller(options) {\n\t    options = options || {};\n\t    // Allow shorthand notation of just passing the name as a string\n\t    if (typeof options === 'string') options = { name: options };\n\t\n\t    return function (target) {\n\t        angular.module(_common.common.currentModule).controller((0, _utils.nameSpace)(options.name), target);\n\t\n\t        return target;\n\t    };\n\t}\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.Service = Service;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _utils = __webpack_require__(6);\n\t\n\tfunction Service(options) {\n\t  options = options || {};\n\t  // Allow shorthand notation of just passing the name as a string\n\t  if (typeof options === 'string') options = {\n\t    name: options\n\t  };\n\t\n\t  return function (target) {\n\t    angular.module(_common.common.currentModule).service((0, _utils.nameSpace)(options.name), target);\n\t    //.factory(options.name, function () { return new target })\n\t\n\t    return target;\n\t  };\n\t}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.Filter = Filter;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _utils = __webpack_require__(6);\n\t\n\tfunction Filter(options) {\n\t  options = options || {};\n\t  // Allow shorthand notation of just passing the name as a string\n\t  if (typeof options === 'string') options = {\n\t    name: options\n\t  };\n\t\n\t  return function (target) {\n\t    filterFunc.$inject = target.$inject;\n\t\n\t    angular.module(_common.common.currentModule).filter((0, _utils.nameSpace)(options.name), filterFunc);\n\t\n\t    function filterFunc() {\n\t      var args = Array.prototype.slice.call(arguments);\n\t      var f = new (Function.prototype.bind.apply(target, [null].concat(args)))();\n\t\n\t      return f;\n\t    }\n\t\n\t    return target;\n\t  };\n\t}\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.bootstrap = bootstrap;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\t/**\n\t * Bootstraps the Angular 1.x app.\n\t *\n\t * @param ?target   undefined | string | class\n\t *      undefined:  bootstraps on document and the current angular module\n\t *      string:     will use document.querySelector to find the element by this string\n\t *      class:      bootstraps on the component defined on this class, looks for selector\n\t *\n\t * @param ?config   angular.bootstrap() config object, see AngularJS doco\n\t */\n\t\n\tfunction bootstrap(target, config) {\n\t  var bootOnDocument = false;\n\t\n\t  if (!target || target && !target.selector && typeof target === 'function') {\n\t    target = {\n\t      selector: _common.common.currentModule\n\t    };\n\t    bootOnDocument = true;\n\t  }\n\t\n\t  // Allow string shortcut for target.selector. Can be the name of any HTML tag.\n\t  if (typeof target === 'string') {\n\t    target = {\n\t      selector: target\n\t    };\n\t  }\n\t\n\t  // Mark this class as a bootstrap component. This allows @State\n\t  // to handle it correctly.\n\t  target.bootstrap = true;\n\t\n\t  var bootModule = target.selector || _common.common.currentModule;\n\t\n\t  if (bootModule !== _common.common.currentModule) angular.module(bootModule);\n\t\n\t  if (!config) config = {\n\t    strictDi: false\n\t  };\n\t\n\t  if (_common.common.isCordova) angular.element(document).on(\"deviceready\", onReady);else angular.element(document).ready(onReady);\n\t\n\t  function onReady() {\n\t    var el = undefined;\n\t\n\t    // Find the component's element\n\t    if (!bootOnDocument) {\n\t      el = document.querySelector(target.selector);\n\t    }\n\t    // Or use document, if user passed no arguments\n\t    else {\n\t        el = document.body;\n\t      }\n\t\n\t    angular.bootstrap(el, [bootModule], config);\n\t  }\n\t}\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.State = State;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _utils = __webpack_require__(6);\n\t\n\t/**\n\t * State can be used to annotate either a Component or a class and assign\n\t * a ui-router state to it.\n\t *\n\t * @param options   literal object\n\t *      name:              name of the state\n\t *      url:               url associated with this state\n\t *      template:          template\n\t *      templateUrl:       templateUrl\n\t *      templateProvider:  templateProvider\n\t *      defaultRoute:      truthy = .otherwise(url)\n\t *                         string = .otherwise(defaultRoute)\n\t *      resolve:           Literal object, see ui-router resolve\n\t *      abstract:          true/false\n\t *      params:            Literal object, see ui-router doco\n\t *      parent:            Define a custom parent state\n\t *      controller:        A controller is automatically assigned, but if you need\n\t *                         finer control then you can assign your own controller\n\t *      controllerAs:      Specify ControllerAs for cases when there is no\n\t *                         @Component used\n\t *\n\t * If a class is annotated then it is assumed to be the controller and\n\t * the state name will be used as the name of the injectable service\n\t * that will hold any resolves requested.\n\t *\n\t * When a component is annotated and resolves requested, then the component's\n\t * selector name is used as the name of the injectable service that holds\n\t * their values.\n\t */\n\t\n\tfunction State(options) {\n\t\n\t  if (!options || !(options instanceof Object) || options.name === undefined) {\n\t    throw new Error('@State: Valid options are: name, url, defaultRoute, template, templateUrl, templateProvider, resolve, abstract, parent, data.');\n\t  }\n\t\n\t  return function (target) {\n\t\n\t    var deps = undefined;\n\t    var resolvedServiceName = (0, _utils.nameSpace)((0, _utils.camelCase)(target.selector || (options.name + '').replace('.', '-')));\n\t\n\t    // Indicates if there is anything to resolve\n\t    var doResolve = false;\n\t\n\t    // Values to resolve can either be supplied in options.resolve or as a static method on the\n\t    // component's class\n\t    var resolves = options.resolve || target.resolve;\n\t\n\t    // Is there a resolve block?\n\t    if (resolves && resolves instanceof Object && (deps = Object.keys(resolves)).length) {\n\t      doResolve = true;\n\t    }\n\t\n\t    // Create an injectable value service to share the resolved values with the controller\n\t    // The service bears the same name as the component's camelCased selector name.\n\t    if (doResolve) {\n\t      if (!(0, _utils.serviceExists)(resolvedServiceName)) {\n\t        angular.module(_common.common.currentModule).value(resolvedServiceName, {});\n\t      }\n\t    }\n\t\n\t    // Configure the state\n\t    angular.module(_common.common.currentModule).config(['$urlRouterProvider', '$stateProvider', '$locationProvider', function ($urlRouterProvider, $stateProvider, $locationProvider) {\n\t      // Activate this state, if options.defaultRoute = true.\n\t      // If you don't want this then don't set options.defaultRoute to true\n\t      // and, instead, use $state.go inside the constructor to active a state.\n\t      // You can also pass a string to defaultRoute, which will become the default route.\n\t      if (options.defaultRoute) {\n\t        $urlRouterProvider.otherwise(typeof options.defaultRoute === 'string' ? options.defaultRoute : options.url);\n\t      }\n\t\n\t      // Optionally configure html5Mode\n\t      if (!(typeof options.html5Mode === 'undefined')) {\n\t        $locationProvider.html5Mode(options.html5Mode);\n\t      }\n\t\n\t      // The user can supply a controller through a parameter in options\n\t      // or the class itself can be used as the controller if no component is annotated.\n\t      var userController = options.controller || (!target.selector ? target : undefined);\n\t\n\t      // Also, de-namespace the resolve injectables for ui-router to inject correctly\n\t      if (userController && userController.$inject && userController.$inject.length && deps && deps.length) {\n\t        deps.forEach(function (dep) {\n\t          var i = userController.$inject.indexOf(_common.common.currentNameSpace + '_' + dep);\n\t\n\t          if (i !== -1) {\n\t            userController.$inject[i] = dep;\n\t          }\n\t        });\n\t      }\n\t\n\t      // This is the state definition object\n\t      var sdo = {\n\t        url: options.url,\n\t\n\t        // Default values for URL parameters can be configured here.\n\t        // ALso, parameters that do not appear in the URL can be configured here.\n\t        params: options.params,\n\t\n\t        // The State applied to a bootstrap component can be abstract,\n\t        // if you don't want that state to be able to activate.\n\t        abstract: options.abstract,\n\t\n\t        templateUrl: options.templateUrl,\n\t\n\t        // This is the \"inline\" template, as opposed to the templateUrl.\n\t        // 1) If either options.templateUrl or options.templateProvider is specified then\n\t        //      template will be set to undefined.\n\t        // 2) If options.template is provided then it will be used.\n\t        // 3) Otherwise, if this is a component, but not the bootstrap(**) component,\n\t        //    then we use it's selector to create the inline template \"<selector></selector>\".\n\t        // 4) Otherwise, we provide the following default template \"<div ui-view></div>\".\n\t        //(**) The bootstrap component will be rendered by Angular directly and must not\n\t        //     be rendered again by ui-router, or you will literally see it twice.\n\t        // todo: allow the user to specify their own div/span instead of forcing \"div(ui-view)\"\n\t        template: (target.template || target.templateUrl) && !target.bootstrap && target.selector ? target.selector.replace(/^(.*)$/, '<$1></$1>') : '<div ui-view=\"\"></div>',\n\t\n\t        // The option for dynamically setting a template based on local values\n\t        //  or injectable services\n\t        templateProvider: options.templateProvider,\n\t\n\t        // Do we need to resolve stuff? If so, then we also provide a controller to catch the resolved data.\n\t        resolve: resolves,\n\t\n\t        // A user supplied controller OR\n\t        // An internally created proxy controller, if resolves were requested for a Component.\n\t        controller: doResolve ? controller : undefined,\n\t\n\t        // Optionally controllerAs can be specifically set for those situations,\n\t        // when we use @State on a class and there is no @Component defined.\n\t        controllerAs: _common.common.ng2nOptions.hasOwnProperty('controllerAs') && !target.hasOwnProperty('selector') ? _common.common.ng2nOptions.controllerAs : undefined,\n\t\n\t        // onEnter and onExit events\n\t        onEnter: options.onEnter,\n\t        onExit: options.onExit,\n\t\n\t        // Custom parent State\n\t        parent: options.parent,\n\t\n\t        // Custom data\n\t        data: options.data\n\t      };\n\t\n\t      // sdo's template\n\t      if (options.templateUrl) {\n\t        sdo.template = options.templateUrl;\n\t      } else if (options.templateProvider) {\n\t        sdo.template = undefined;\n\t      } else if (options.template) {\n\t        sdo.template = options.templateUrl;\n\t      }\n\t\n\t      // sdo's controller\n\t      if (userController) {\n\t        sdo.controller = userController;\n\t      }\n\t\n\t      // sdo's controllerAs\n\t      if (target.controllerAs) {\n\t        sdo.controllerAs = target.controllerAs;\n\t      } else if (options.controllerAs) {\n\t        sdo.controllerAs = options.controllerAs;\n\t      }\n\t\n\t      // Create the state\n\t      $stateProvider.state(options.name, sdo);\n\t\n\t      // When our automatic controller is used, we inject the resolved values into it,\n\t      // along with the injectable service that will be used to publish them.\n\t      // If the user supplied a controller than we do not inject anything\n\t      if (doResolve) {\n\t        deps.unshift(resolvedServiceName);\n\t\n\t        controller.$inject = deps;\n\t      }\n\t\n\t      // Populate the published service with the resolved values\n\t      function controller() {\n\t        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t          args[_key] = arguments[_key];\n\t        }\n\t\n\t        // This is the service that we \"unshifted\" earlier\n\t        var localScope = args[0];\n\t\n\t        args = args.slice(1);\n\t\n\t        // Now we copy the resolved values to the service.\n\t        // This service can be injected into a component's constructor, for example.\n\t        deps.slice(1).forEach(function (v, i) {\n\t          localScope[v] = args[i];\n\t        });\n\t      }\n\t    }]);\n\t\n\t    return target;\n\t  };\n\t}\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.options = options;\n\texports.Options = Options;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _setModule = __webpack_require__(2);\n\t\n\t// Allow configuration of some angular2-now default settings\n\t// controllerAs: if provided, will user this string instead of component name, for example \"vm\"\n\t\n\tfunction options(options) {\n\t  if (!options) {\n\t    return _common.common.ng2nOptions;\n\t  }\n\t\n\t  if (typeof options.controllerAs !== 'undefined') {\n\t    _common.common.controllerAs = options.controllerAs;\n\t  }\n\t\n\t  // Optional spinner object can be registered. It must expose show() and hide() methods.\n\t  // The spinner will be activated before any I/O operations and deactivated once they complete.\n\t  _common.common.ng2nOptions.spinner = options.spinner || {\n\t    show: angular.noop,\n\t    hide: angular.noop\n\t  };\n\t\n\t  // events expose beforeCall() and afterCall().\n\t  // beforeCall() will be called before any I/O operations.\n\t  // afterCall() will be called after any I/O operations have completed.\n\t  _common.common.ng2nOptions.events = options.events || {\n\t    beforeCall: angular.noop,\n\t    afterCall: angular.noop\n\t  };\n\t\n\t  // The noConflict option allows us to control whether or not angular2-now\n\t  // monkey-patches angular.module.\n\t  //  true = don't monkey patch.\n\t  //  false = (default for versions < 0.4.0)  DO monkey patch angular.module\n\t  //          for backwards compatibility\n\t  if (typeof options.noConflict !== 'undefined') {\n\t    angular.module = options.noConflict ? _common.common.angularModule : _setModule.SetModule;\n\t  }\n\t}\n\t\n\tfunction Options(options) {\n\t  return function (target) {\n\t    angular.merge(_common.common.ng2nOptions, options);\n\t    return target;\n\t  };\n\t}\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.MeteorMethod = MeteorMethod;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\t// The name of the Meteor.method is the same as the name of class method.\n\t\n\tfunction MeteorMethod(_options) {\n\t  var options = angular.merge({}, _common.common.ng2nOptions, _options);\n\t  var spinner = options.spinner || {\n\t    show: angular.noop,\n\t    hide: angular.noop\n\t  };\n\t  var events = options.events || {\n\t    beforeCall: angular.noop,\n\t    afterCall: angular.noop\n\t  };\n\t\n\t  return function (target, name, descriptor) {\n\t\n\t    // Create a method that calls the back-end\n\t    descriptor.value = function () {\n\t      var argv = Array.prototype.slice.call(arguments);\n\t      var deferred = _common.common.$q.defer();\n\t\n\t      if (typeof spinner === 'string') {\n\t        if (angular.injector(['ng', _common.common.currentModule]).has(options.spinner)) {\n\t          spinner = angular.injector(['ng', _common.common.currentModule]).get(options.spinner);\n\t          options.spinner = spinner;\n\t        } else throw new Error('Spinner \"' + spinner + '\" does not exist.');\n\t      }\n\t\n\t      argv.unshift(name);\n\t      argv.push(resolver);\n\t\n\t      if (spinner) {\n\t        spinner.show();\n\t      }\n\t\n\t      if (events.beforeCall) {\n\t        events.beforeCall();\n\t      }\n\t      // Call optional events.beforeCall()\n\t\n\t      // todo: should call Meteor after resolution of promise returned by beforeCall()\n\t      Meteor.call.apply(this, argv);\n\t\n\t      deferred.promise['finally'](function () {\n\t        spinner.hide();\n\t        // Call optional events.afterCall()\n\t        if (events.afterCall) {\n\t          events.afterCall();\n\t        }\n\t      });\n\t\n\t      return deferred.promise;\n\t\n\t      function resolver(err, data) {\n\t        if (err) {\n\t          deferred.reject(err);\n\t        } else {\n\t          deferred.resolve(data);\n\t        }\n\t      }\n\t    };\n\t\n\t    return descriptor;\n\t  };\n\t}\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\t// Turn on an indication to run $reactive(this).attach($scope) for the component's controller.\n\t// Uses with Angular-Meteor: http://angular-meteor.com, v1.3 and up only\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.MeteorReactive = MeteorReactive;\n\t\n\tfunction MeteorReactive(target) {\n\t  target.meteorReactive = true;\n\t  return target;\n\t}\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.LocalInjectables = LocalInjectables;\n\t\n\tfunction LocalInjectables(target) {\n\t  target.localInjectables = true;\n\t  return target;\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** dist/angular2-now.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap be16a0160cef94d626ce\n **/","import { common } from './common';\nimport { SetModule } from './api/set-module';\nimport { Component } from './api/component';\nimport { ScopeShared } from './api/scope-shared';\nimport { ScopeNew } from './api/scope-new';\nimport { View } from './api/view';\nimport { Inject } from './api/inject';\nimport { Controller } from './api/controller';\nimport { Service } from './api/service';\nimport { Filter } from './api/filter';\nimport { bootstrap } from './api/bootstrap';\nimport { State } from './api/state';\nimport { options, Options } from './api/options';\nimport { MeteorMethod } from './api/meteor-method';\nimport { MeteorReactive } from './api/meteor-reactive';\nimport { LocalInjectables } from './api/local-injectables';\n\nconst angular2now = {\n    init,\n\n    SetModule,\n\n    Component,\n    ScopeShared,\n    ScopeNew,\n    View,\n    Inject,\n    Controller,\n    Service,\n    Filter,\n    bootstrap,\n    State,\n\n    options,\n    Options,\n\n    MeteorMethod,\n    MeteorReactive,\n    LocalInjectables,\n\n    Directive:   Component,\n    Injectable:  Service\n};\n\nfunction init() {\n    common.isCordova = typeof cordova !== 'undefined';\n    common.angularModule = angular.module;\n}\n\nif(typeof Meteor === 'undefined') {\n  init();\n}\n\nexport default angular2now;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/angular2-now.js\n **/","export const common = {\n  angularModule: undefined,\n  currentModule: undefined,\n  currentNameSpace: undefined,\n  isCordova: false,\n  ng2nOptions: {\n    currentModule() {\n      return common.currentModule;\n    }\n  },\n  controllerAs: undefined,\n  $q: angular.injector(['ng']).get('$q')\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/common.js\n **/","import { common } from './../common';\n\nexport function SetModule() {\n  /**\n   * Name-spacing applies to provider names, not modules. Each module\n   * has to have a unique name of it's own.\n   *\n   * A namespace may be specified like this:\n   *     SetModule('ftdesiree:helpers')\n   * The namespace, once set, will remain in force until removed.\n   * Remove the namespace like this:\n   *     angular.module(':helpers')\n   **/\n  common.currentModule = arguments[0].split(':');\n\n  if (common.currentModule.length === 1) {\n    // No namespace, just the module name\n    common.currentModule = common.currentModule[0];\n  } else {\n    // Split off the name-space and module name\n    common.currentNameSpace = common.currentModule[0];\n    common.currentModule = common.currentModule[1];\n\n    // Reassign arguments[0] without the namespace\n    arguments[0] = common.currentModule;\n  }\n\n  return common.angularModule.apply(angular, arguments);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/set-module.js\n **/","import { View } from './view';\nimport { Inject } from './inject';\nimport { common } from './../common';\nimport { camelCase, unCamelCase } from './../utils';\n\n//function Directive(options) {\n//\n//    // A string passed is assumed to be the attribute name of the directive.\n//    if (typeof options === 'string')\n//        options = { selector: options };\n//\n//    // Directives have shared scope by default (scope:undefined).\n//    // Optionally they can have a new scope created (scope: true).\n//    // If you require an isolate scope for your directive then\n//    // pass \"scope: { ... }\" in options.\n//    if (options && !options.hasOwnProperty('scope'))\n//        angular.merge(options, { scope: undefined });\n//\n//    return Component(options);\n//}\n\nexport function Component(options) {\n  options = options || {};\n  // Allow shorthand notation of just passing the selector name as a string\n  if (typeof options === 'string') {\n    options = {\n      selector: options\n    };\n  }\n\n  return function(target) {\n    let isClass = false;\n\n    // Create a stub controller and substitute it for the target's constructor,\n    // so that we can call the target's constructor later, within the link function.\n    target = deferController(target, controller);\n\n    // service injections, which could also have been specified by using @Inject\n    if (options.injectables && options.injectables instanceof Array) {\n      target = Inject(options.injectables)(target);\n    }\n    // injectables has been renamed to services\n    if (options.services && options.services instanceof Array) {\n      target = Inject(options.services)(target);\n    }\n\n    // Selector name may be prefixed with a '.', in which case \"restrict: 'C'\" will be used\n    options.selector = camelCase(options.selector || '') + '';\n    if (options.selector[0] === '.') {\n      isClass = true;\n      options.selector = options.selector.slice(1);\n    }\n    // Save the unCamelCased selector name, so that bootstrap() can use it\n    target.selector = unCamelCase(options.selector);\n\n    // template options can be set with Component or with View\n    // so, we run View on the passed in options first.\n    if (options.template || options.templateUrl || options.transclude || options.directives) {\n      View(options)(target);\n    }\n\n    // The template(Url) can also be passed in from the @View decorator\n    options.template = target.template || undefined;\n    options.templateUrl = target.templateUrl || undefined;\n\n    // Build the require array.\n    // Our controller needs the same injections as the component's controller,\n    // but with the \"@*\" injections renamed to \"$scope\". The link function will pass\n    // the \"@*\" injections directly to the component controller.\n    const requiredControllers = [options.selector];\n\n    target.$inject = target.$inject || [];\n    target.$inject = target.$inject.map(function(dep) {\n      if (/^@[^]{0,2}/.test(dep[0])) {\n        requiredControllers.push('?' + dep.slice(1));\n        dep = 'delete-me'\n      }\n      return dep;\n    });\n\n    // Remove all the 'delete-me' entries\n    target.$inject = target.$inject.filter(function(v) {\n      return v !== 'delete-me';\n    });\n\n    if (target.meteorReactive) {\n      // Prepend angular-meteor injectables\n      target.$inject.unshift('$scope');\n      target.$inject.unshift('$reactive');\n    }\n\n    // Remember the original $inject, as it will be needed in the link function.\n    // In the link function we will receive any requested component controllers\n    // which we will then inject into the arguments that we will pass to the\n    // actual constructor of our component.\n    target.$injectDefer = target.$inject || [];\n\n    // Create the angular directive\n    const ddo = {\n      controllerAs: options.controllerAs || common.controllerAs || target.controllerAs || options.selector,\n      bindToController: typeof target.bindToController === 'boolean' ? target.bindToController : true,\n      restrict: (options.template + options.templateUrl) ? 'EA' : isClass ? 'C' : 'A',\n      scope: {},\n      template: options.template,\n      templateUrl: options.templateUrl,\n      controller: target,\n      replace: options.replace || false,\n      transclude: /ng-transclude/i.test(options.template) || target.transclude,\n      require: options.require || target.require || requiredControllers,\n      link: options.link || target.link || link\n    };\n\n    // ddo's restrict\n    if (options.restrict) {\n      ddo.restrict = options.restrict;\n    }\n    // ddo's scope\n    if (target.hasOwnProperty('scope')) {\n      ddo.scope = target.scope;\n    } else if (options.hasOwnProperty('scope')) {\n      ddo.scope = options.scope;\n    } else if (options['bind']) {\n      ddo.scope = options['bind'];\n    }\n\n\n    try {\n      angular.module(common.currentModule)\n        .directive(options.selector, () => ddo);\n    } catch (er) {\n      throw new Error('Does module \"' + common.currentModule + '\" exist? You may need to use angular.module(\"youModuleName\").');\n    }\n\n    return target;\n\n    // The stub controller below saves injected objects, so we can re-inject them\n    // into the \"real\" controller when the link function executes.\n    // This allows me to add stuff to the controller and it's \"this\", which is required\n    // for some future functionality.\n    function controller(...args) {\n      const ctrlInstance = this;\n      let toInjectAfter = [];\n      let injectedDeps = args;\n\n      if (target.meteorReactive) {\n        // Get injected angular-meteor objects\n        const $reactive = injectedDeps[0];\n        const $scope = injectedDeps[1];\n\n        $reactive(ctrlInstance).attach($scope);\n\n        toInjectAfter = injectedDeps.slice(0, 2);\n        injectedDeps = injectedDeps.slice(2);\n        target.$inject = target.$inject.slice(2);\n      }\n      if (target.localInjectables) {\n        target.$inject.forEach(function(value, index) {\n          ctrlInstance[value] = injectedDeps[index];\n        });\n      }\n      // Call the original constructor, which is now called $$init, injecting all the\n      // dependencies requested.\n      this.$$init.apply(this, injectedDeps);\n\n      if (toInjectAfter.length > 0) {\n        target.$inject = ['$reactive', '$scope'].concat(target.$inject);\n        injectedDeps.unshift(toInjectAfter[1]);\n        injectedDeps.unshift(toInjectAfter[0]);\n      }\n    }\n    // This function allows me to replace a component's \"real\" constructor with my own.\n    // I do this, because I want to decorate the $scope and this before instantiating\n    // the class's original controller. Also, this enables me to inject\n    // other component's controllers into the constructor, the same way as you would\n    // inject a service.\n    // The component's original constructor is assigned to the init method of the\n    // component's class, so that when it executes it will run in the original scope and\n    // closures that it was defined in. It is the init method that is called within the\n    // link function.\n    function deferController (target, controller) {\n      // Save the original prototype\n      const oldproto = target.prototype;\n      // Save the original constructor, so we can call it later\n      const construct = target.prototype.constructor;\n      // Save any static properties\n      const staticProps = {};\n\n      for (let i in target) {\n        if (target.hasOwnProperty(i)) {\n          staticProps[i] = target[i];\n        }\n      }\n      // Assign a new constructor, which holds the injected deps.\n      target = controller;\n      // Restore the original prototype\n      target.prototype = oldproto;\n      // Restore saved static properties\n      for (let i in staticProps) {\n        target[i] = staticProps[i];\n      }\n      // Store the original constructor under the name $$init,\n      // which we will call in the link function.\n      target.prototype.$$init = construct;\n      // Hide $$init from the user's casual inspections of the controller\n      //Object.defineProperty(target.prototype, \"$$init\", {enumerable: false})\n      return target;\n    }\n\n    function link(scope, el, attr, controllers) {\n      // Create a service with the same name as the selector\n      // That holds a reference to our component\n      //angular.module(currentModule).value(camelCase(target.selector), controllers[0]);\n\n      // Alternate syntax for the injection of other component's controllers\n      if (controllers[0].$dependson) {\n        controllers[0].$dependson.apply(controllers[0], controllers.slice(1));\n      }\n    }\n  };\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/component.js\n **/","export function View(options) {\n  options = options || {};\n  // Allow shorthand notation of just passing the templateUrl as a string\n  if (typeof options === 'string')\n    options = {\n      templateUrl: options\n    };\n\n  //if (!options.template) options.template = undefined;\n\n  return function(target) {\n    target.template = options.template || target.template;\n    target.templateUrl = options.templateUrl || target.templateUrl;\n\n    // When a templateUrl is specified in options, then transclude can also be specified\n    target.transclude = options.transclude || target.transclude;\n\n    // directives is an array of child directive controllers (Classes)\n    target.directives = options.directives || target.directives;\n\n    // Check for the new <content> tag and add ng-transclude to it, if not there.\n    if (target.template)\n      target.template = transcludeContent(target.template);\n\n    return target;\n  };\n\n  // If template contains the new <content> tag then add ng-transclude to it.\n  // This will be picked up in @Component, where ddo.transclude will be set to true.\n  function transcludeContent(template) {\n    const s = (template || '').match(/\\<content[ >]([^\\>]+)/i);\n\n    if (s && s[1].toLowerCase().indexOf('ng-transclude') === -1) {\n      template = template.replace(/\\<content/i, '<content ng-transclude');\n    }\n    \n    return template;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/view.js\n **/","import { nameSpace } from './../utils';\n\n// 2015-09-01 Replaced the whole Inject function with a new more flexible version.\n// Thanks to Steven Weingärtner for his code, which works with both Classes and Methods,\n// as well as preserving injectables from a parent class (when extending a parent class).\n// New features:\n// - Dependencies can be passed in as arguments, not requiring the array wrapper. The\n//   original syntax with the array wrapper is still supported.\n// - Methods of a class can now be Injected also\n// - Child classes will inherit the parent class's injectables, which will be appended\n//   to the end of the child's dependencies\nexport function Inject(...args) {\n  let deps;\n\n  if (args[0] instanceof Array) {\n    deps = args[0];\n  } else {\n    deps = args;\n  }\n\n  if (deps.length === 0) {\n    throw new Error('@Inject: No dependencies passed in');\n  }\n\n  return function(target, name, descriptor) {\n    let injectable = target;\n\n    if (descriptor) {\n      injectable = descriptor.value;\n    }\n\n    if (!injectable) {\n      throw new TypeError('@Inject can only be used with classes or class methods.')\n    }\n\n    const existingInjects = injectable.$inject;\n\n    injectable.$inject = [];\n\n    deps.forEach((dep) => {\n      // Namespace any injectables without an existing nameSpace prefix and also\n      // not already prefixed with '$', '@' or '@^'.\n      if (dep[0] !== '$' && dep[0] !== '@' && dep.indexOf('_') === -1) {\n        dep = nameSpace(dep);\n      }\n\n      if (injectable.$inject.indexOf(dep) === -1) {\n        injectable.$inject.push(dep);\n      }\n    });\n\n    if (existingInjects) {\n      injectable.$inject = injectable.$inject.concat(existingInjects);\n    }\n\n    return descriptor || target;\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/inject.js\n **/","import { common } from './common';\n\n// Create a new name from the concatenation of\n// the currentNameSpace and the name argument\nexport function nameSpace(name) {\n  return common.currentNameSpace ? common.currentNameSpace + '_' + name : name;\n}\n\n// Does a provider with a specific name exist in the current module\nexport function serviceExists(serviceName) {\n    return !!getService(serviceName);\n}\n\nexport function getService(serviceName, moduleName) {\n    return angular.module(moduleName || common.currentModule)\n        ._invokeQueue\n        .filter((v, i) => v[0] === '$provide' && v[2][0] === serviceName)[0];\n}\n\nexport function camelCase(s) {\n    return s.replace(/-(.)/g, (a, b) => b.toUpperCase());\n}\n\nexport function unCamelCase(c) {\n    const s = c.replace(/([A-Z])/g, '-$1')\n             .replace(/--/g, '-')\n             .toLowerCase();\n\n    if (s[0] === '-') {\n      return s.slice(1);\n    }\n\n    return s;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/utils.js\n **/","// Cancels out the automatic creation of isolate scope for the directive,\n// because Angular 1.x allows only one isolate scope directive per element.\n// This is useful when actually creating directives, which add behaviour\n// to an existing element, as opposed to components which are stand alone\n// bits of html and behaviour.\n// The other way to do this is to pass \"scope: undefined\" to @Component.\nexport function ScopeShared(target) {\n  target.scope = undefined;\n  return target\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/scope-shared.js\n **/","// Requests a new scope to be created when the directive is created.\n// The other way to do this is to pass \"scope: true\" to @Component.\nexport function ScopeNew(target) {\n  target.scope = true;\n  return target\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/scope-new.js\n **/","import { common } from './../common';\nimport { nameSpace } from './../utils';\n\nexport function Controller(options) {\n    options = options || {};\n    // Allow shorthand notation of just passing the name as a string\n    if (typeof options === 'string')\n        options = { name: options };\n\n    return function (target) {\n        angular.module(common.currentModule)\n            .controller(nameSpace(options.name), target);\n\n        return target;\n    };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/controller.js\n **/","import { common } from './../common';\nimport { nameSpace } from './../utils';\n\nexport function Service(options) {\n  options = options || {};\n  // Allow shorthand notation of just passing the name as a string\n  if (typeof options === 'string')\n    options = {\n      name: options\n    };\n\n  return function(target) {\n    angular.module(common.currentModule)\n      .service(nameSpace(options.name), target);\n    //.factory(options.name, function () { return new target })\n\n    return target;\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/service.js\n **/","import { common } from './../common';\nimport { nameSpace } from './../utils';\n\nexport function Filter(options) {\n  options = options || {};\n  // Allow shorthand notation of just passing the name as a string\n  if (typeof options === 'string')\n    options = {\n      name: options\n    };\n\n  return function(target) {\n    filterFunc.$inject = target.$inject;\n\n    angular.module(common.currentModule)\n      .filter(nameSpace(options.name), filterFunc);\n\n    function filterFunc() {\n      const args = Array.prototype.slice.call(arguments);\n      const f = new(Function.prototype.bind.apply(target, [null].concat(args)));\n\n      return f;\n    }\n\n    return target;\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/filter.js\n **/","import { common } from './../common';\n\n/**\n * Bootstraps the Angular 1.x app.\n *\n * @param ?target   undefined | string | class\n *      undefined:  bootstraps on document and the current angular module\n *      string:     will use document.querySelector to find the element by this string\n *      class:      bootstraps on the component defined on this class, looks for selector\n *\n * @param ?config   angular.bootstrap() config object, see AngularJS doco\n */\nexport function bootstrap(target, config) {\n  let bootOnDocument = false;\n\n  if (!target || (target && !target.selector && typeof target === 'function')) {\n    target = {\n      selector: common.currentModule\n    };\n    bootOnDocument = true;\n  }\n\n  // Allow string shortcut for target.selector. Can be the name of any HTML tag.\n  if (typeof target === 'string') {\n    target = {\n      selector: target\n    };\n  }\n\n  // Mark this class as a bootstrap component. This allows @State\n  // to handle it correctly.\n  target.bootstrap = true;\n\n  const bootModule = target.selector || common.currentModule;\n\n  if (bootModule !== common.currentModule)\n    angular.module(bootModule);\n\n  if (!config)\n    config = {\n      strictDi: false\n    };\n\n  if (common.isCordova)\n    angular.element(document).on(\"deviceready\", onReady);\n  else\n    angular.element(document).ready(onReady);\n\n  function onReady() {\n    let el;\n\n    // Find the component's element\n    if (!bootOnDocument) {\n      el = document.querySelector(target.selector);\n    }\n    // Or use document, if user passed no arguments\n    else {\n      el = document.body;\n    }\n\n    angular.bootstrap(el, [bootModule], config);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/bootstrap.js\n **/","import {\n  common\n}\nfrom './../common';\nimport {\n  serviceExists, nameSpace, camelCase\n}\nfrom './../utils';\n\n/**\n * State can be used to annotate either a Component or a class and assign\n * a ui-router state to it.\n *\n * @param options   literal object\n *      name:              name of the state\n *      url:               url associated with this state\n *      template:          template\n *      templateUrl:       templateUrl\n *      templateProvider:  templateProvider\n *      defaultRoute:      truthy = .otherwise(url)\n *                         string = .otherwise(defaultRoute)\n *      resolve:           Literal object, see ui-router resolve\n *      abstract:          true/false\n *      params:            Literal object, see ui-router doco\n *      parent:            Define a custom parent state\n *      controller:        A controller is automatically assigned, but if you need\n *                         finer control then you can assign your own controller\n *      controllerAs:      Specify ControllerAs for cases when there is no\n *                         @Component used\n *\n * If a class is annotated then it is assumed to be the controller and\n * the state name will be used as the name of the injectable service\n * that will hold any resolves requested.\n *\n * When a component is annotated and resolves requested, then the component's\n * selector name is used as the name of the injectable service that holds\n * their values.\n */\nexport function State(options) {\n\n  if (!options || !(options instanceof Object) || options.name === undefined) {\n    throw new Error('@State: Valid options are: name, url, defaultRoute, template, templateUrl, templateProvider, resolve, abstract, parent, data.');\n  }\n\n  return function(target) {\n\n    let deps;\n    const resolvedServiceName = nameSpace(camelCase(target.selector || (options.name + '').replace('.', '-')));\n\n    // Indicates if there is anything to resolve\n    let doResolve = false;\n\n    // Values to resolve can either be supplied in options.resolve or as a static method on the\n    // component's class\n    const resolves = options.resolve || target.resolve;\n\n    // Is there a resolve block?\n    if (resolves && resolves instanceof Object && (deps = Object.keys(resolves)).length) {\n      doResolve = true;\n    }\n\n    // Create an injectable value service to share the resolved values with the controller\n    // The service bears the same name as the component's camelCased selector name.\n    if (doResolve) {\n      if (!serviceExists(resolvedServiceName)) {\n        angular.module(common.currentModule).value(resolvedServiceName, {});\n      }\n    }\n\n    // Configure the state\n    angular.module(common.currentModule)\n      .config(['$urlRouterProvider', '$stateProvider', '$locationProvider',\n        function($urlRouterProvider, $stateProvider, $locationProvider) {\n          // Activate this state, if options.defaultRoute = true.\n          // If you don't want this then don't set options.defaultRoute to true\n          // and, instead, use $state.go inside the constructor to active a state.\n          // You can also pass a string to defaultRoute, which will become the default route.\n          if (options.defaultRoute) {\n            $urlRouterProvider.otherwise((typeof options.defaultRoute === 'string') ? options.defaultRoute : options.url);\n          }\n\n          // Optionally configure html5Mode\n          if (!(typeof options.html5Mode === 'undefined')) {\n            $locationProvider.html5Mode(options.html5Mode);\n          }\n\n          // The user can supply a controller through a parameter in options\n          // or the class itself can be used as the controller if no component is annotated.\n          const userController = options.controller || (!target.selector ? target : undefined);\n\n          // Also, de-namespace the resolve injectables for ui-router to inject correctly\n          if (userController && userController.$inject && userController.$inject.length && deps && deps.length) {\n            deps.forEach(function(dep) {\n              const i = userController.$inject.indexOf(common.currentNameSpace + '_' + dep);\n\n              if (i !== -1) {\n                userController.$inject[i] = dep;\n              }\n            });\n          }\n\n\n          // This is the state definition object\n          const sdo = {\n            url: options.url,\n\n            // Default values for URL parameters can be configured here.\n            // ALso, parameters that do not appear in the URL can be configured here.\n            params: options.params,\n\n            // The State applied to a bootstrap component can be abstract,\n            // if you don't want that state to be able to activate.\n            abstract: options.abstract,\n\n            templateUrl: options.templateUrl,\n\n            // This is the \"inline\" template, as opposed to the templateUrl.\n            // 1) If either options.templateUrl or options.templateProvider is specified then\n            //      template will be set to undefined.\n            // 2) If options.template is provided then it will be used.\n            // 3) Otherwise, if this is a component, but not the bootstrap(**) component,\n            //    then we use it's selector to create the inline template \"<selector></selector>\".\n            // 4) Otherwise, we provide the following default template \"<div ui-view></div>\".\n            //(**) The bootstrap component will be rendered by Angular directly and must not\n            //     be rendered again by ui-router, or you will literally see it twice.\n            // todo: allow the user to specify their own div/span instead of forcing \"div(ui-view)\"\n            template: (target.template || target.templateUrl) && !target.bootstrap && target.selector ? target.selector.replace(/^(.*)$/, '<$1></$1>') : '<div ui-view=\"\"></div>',\n\n            // The option for dynamically setting a template based on local values\n            //  or injectable services\n            templateProvider: options.templateProvider,\n\n            // Do we need to resolve stuff? If so, then we also provide a controller to catch the resolved data.\n            resolve: resolves,\n\n            // A user supplied controller OR\n            // An internally created proxy controller, if resolves were requested for a Component.\n            controller: doResolve ? controller : undefined,\n\n            // Optionally controllerAs can be specifically set for those situations,\n            // when we use @State on a class and there is no @Component defined.\n            controllerAs: common.ng2nOptions.hasOwnProperty('controllerAs') && !target.hasOwnProperty('selector') ? common.ng2nOptions.controllerAs : undefined,\n\n            // onEnter and onExit events\n            onEnter: options.onEnter,\n            onExit: options.onExit,\n\n            // Custom parent State\n            parent: options.parent,\n\n            // Custom data\n            data: options.data\n          };\n\n          // sdo's template\n          if (options.templateUrl) {\n            sdo.template = options.templateUrl;\n          } else if (options.templateProvider) {\n            sdo.template = undefined;\n          } else if (options.template) {\n            sdo.template = options.templateUrl;\n          }\n\n          // sdo's controller\n          if (userController) {\n            sdo.controller = userController;\n          }\n\n          // sdo's controllerAs\n          if (target.controllerAs) {\n            sdo.controllerAs = target.controllerAs;\n          } else if (options.controllerAs) {\n            sdo.controllerAs = options.controllerAs;\n          }\n\n          // Create the state\n          $stateProvider.state(options.name, sdo);\n\n          // When our automatic controller is used, we inject the resolved values into it,\n          // along with the injectable service that will be used to publish them.\n          // If the user supplied a controller than we do not inject anything\n          if (doResolve) {\n            deps.unshift(resolvedServiceName);\n\n            controller.$inject = deps;\n          }\n\n          // Populate the published service with the resolved values\n          function controller(...args) {\n            // This is the service that we \"unshifted\" earlier\n            let localScope = args[0];\n\n            args = args.slice(1);\n\n            // Now we copy the resolved values to the service.\n            // This service can be injected into a component's constructor, for example.\n            deps.slice(1).forEach(function(v, i) {\n              localScope[v] = args[i];\n            });\n\n          }\n\n        }\n      ]);\n\n    return target;\n  };\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/state.js\n **/","import { common } from './../common';\nimport { SetModule } from './set-module';\n\n// Allow configuration of some angular2-now default settings\n// controllerAs: if provided, will user this string instead of component name, for example \"vm\"\nexport function options(options) {\n  if (!options) {\n    return common.ng2nOptions;\n  }\n\n  if (typeof options.controllerAs !== 'undefined') {\n    common.controllerAs = options.controllerAs;\n  }\n\n  // Optional spinner object can be registered. It must expose show() and hide() methods.\n  // The spinner will be activated before any I/O operations and deactivated once they complete.\n  common.ng2nOptions.spinner = options.spinner || {\n    show: angular.noop,\n    hide: angular.noop\n  };\n\n  // events expose beforeCall() and afterCall().\n  // beforeCall() will be called before any I/O operations.\n  // afterCall() will be called after any I/O operations have completed.\n  common.ng2nOptions.events = options.events || {\n    beforeCall: angular.noop,\n    afterCall: angular.noop\n  };\n\n  // The noConflict option allows us to control whether or not angular2-now\n  // monkey-patches angular.module.\n  //  true = don't monkey patch.\n  //  false = (default for versions < 0.4.0)  DO monkey patch angular.module\n  //          for backwards compatibility\n  if (typeof options.noConflict !== 'undefined') {\n    angular.module = options.noConflict ? common.angularModule : SetModule;\n  }\n}\n\nexport function Options(options) {\n  return function(target) {\n    angular.merge(common.ng2nOptions, options);\n    return target;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/options.js\n **/","import { common } from './../common';\n\n// The name of the Meteor.method is the same as the name of class method.\nexport function MeteorMethod(_options) {\n  const options = angular.merge({}, common.ng2nOptions, _options);\n  let spinner = options.spinner || {\n    show: angular.noop,\n    hide: angular.noop\n  };\n  const events = options.events || {\n    beforeCall: angular.noop,\n    afterCall: angular.noop\n  };\n\n  return function(target, name, descriptor) {\n\n    // Create a method that calls the back-end\n    descriptor.value = function() {\n      const argv = Array.prototype.slice.call(arguments);\n      const deferred = common.$q.defer();\n\n      if (typeof spinner === 'string') {\n        if (angular.injector(['ng', common.currentModule]).has(options.spinner)) {\n          spinner = angular.injector(['ng', common.currentModule]).get(options.spinner);\n          options.spinner = spinner;\n        } else\n          throw new Error('Spinner \"' + spinner + '\" does not exist.');\n      }\n\n      argv.unshift(name);\n      argv.push(resolver);\n\n      if (spinner) {\n        spinner.show();\n      }\n\n      if (events.beforeCall) {\n        events.beforeCall();\n      }\n      // Call optional events.beforeCall()\n\n      // todo: should call Meteor after resolution of promise returned by beforeCall()\n      Meteor.call.apply(this, argv);\n\n      deferred.promise.finally(function() {\n        spinner.hide();\n        // Call optional events.afterCall()\n        if (events.afterCall) {\n          events.afterCall();\n        }\n\n      });\n\n      return deferred.promise;\n\n      function resolver(err, data) {\n        if (err) {\n          deferred.reject(err);\n        } else {\n          deferred.resolve(data);\n        }\n      }\n    };\n\n    return descriptor;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/meteor-method.js\n **/","// Turn on an indication to run $reactive(this).attach($scope) for the component's controller.\n// Uses with Angular-Meteor: http://angular-meteor.com, v1.3 and up only\nexport function MeteorReactive(target) {\n  target.meteorReactive = true;\n  return target;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/meteor-reactive.js\n **/","export function LocalInjectables(target) {\n  target.localInjectables = true;\n  return target;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/local-injectables.js\n **/"],"sourceRoot":""}