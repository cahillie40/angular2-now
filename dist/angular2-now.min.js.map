{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///dist/angular2-now.min.js","webpack:///webpack/bootstrap 215c737197ce57ee7025","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/angular2-now.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/common.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/set-module.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/component.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/view.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/inject.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/utils.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/scope-shared.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/scope-new.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/controller.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/service.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/filter.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/bootstrap.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/state.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/options.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/meteor-method.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","init","_common","common","isCordova","cordova","angularModule","angular","Object","defineProperty","value","_apiSetModule","_apiComponent","_apiScopeShared","_apiScopeNew","_apiView","_apiInject","_apiController","_apiService","_apiFilter","_apiBootstrap","_apiState","_apiOptions","_apiMeteorMethod","angular2now","SetModule","Component","ScopeShared","ScopeNew","View","Inject","Controller","Service","Filter","bootstrap","State","options","Options","MeteorMethod","Directive","Injectable","Meteor","undefined","currentModule","currentNameSpace","ng2nOptions","controllerAs","$q","injector","get","arguments","split","length","apply","selector","target","link","scope","el","attr","controllers","$dependson","slice","isClass","injectables","Array","_inject","services","_utils","camelCase","unCamelCase","template","templateUrl","transclude","directives","_view","requiredControllers","$inject","map","dep","test","push","filter","v","$injectDefer","ddo","bindToController","restrict","controller","replace","require","hasOwnProperty","directive","er","Error","transcludeContent","s","match","toLowerCase","indexOf","deps","_len","args","_key","name","descriptor","injectable","TypeError","existingInjects","forEach","nameSpace","concat","serviceExists","serviceName","getService","moduleName","_invokeQueue","i","a","b","toUpperCase","service","filterFunc","prototype","f","Function","bind","config","onReady","bootOnDocument","document","body","querySelector","bootModule","strictDi","element","on","ready","resolvedServiceName","doResolve","resolves","resolve","keys","$urlRouterProvider","$stateProvider","$locationProvider","localScope","defaultRoute","otherwise","url","html5Mode","userController","sdo","params","abstract","templateProvider","onEnter","onExit","parent","data","state","unshift","spinner","show","noop","hide","events","beforeCall","afterCall","noConflict","_setModule","merge","_options","resolver","err","deferred","reject","argv","defer","has","promise"],"mappings":"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","file":"dist/angular2-now.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular2now\"] = factory();\n\telse\n\t\troot[\"angular2now\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular2now\"] = factory();\n\telse\n\t\troot[\"angular2now\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _apiSetModule = __webpack_require__(2);\n\t\n\tvar _apiComponent = __webpack_require__(3);\n\t\n\tvar _apiScopeShared = __webpack_require__(7);\n\t\n\tvar _apiScopeNew = __webpack_require__(8);\n\t\n\tvar _apiView = __webpack_require__(4);\n\t\n\tvar _apiInject = __webpack_require__(5);\n\t\n\tvar _apiController = __webpack_require__(9);\n\t\n\tvar _apiService = __webpack_require__(10);\n\t\n\tvar _apiFilter = __webpack_require__(11);\n\t\n\tvar _apiBootstrap = __webpack_require__(12);\n\t\n\tvar _apiState = __webpack_require__(13);\n\t\n\tvar _apiOptions = __webpack_require__(14);\n\t\n\tvar _apiMeteorMethod = __webpack_require__(15);\n\t\n\tvar angular2now = {\n\t    init: init,\n\t\n\t    SetModule: _apiSetModule.SetModule,\n\t\n\t    Component: _apiComponent.Component,\n\t    ScopeShared: _apiScopeShared.ScopeShared,\n\t    ScopeNew: _apiScopeNew.ScopeNew,\n\t    View: _apiView.View,\n\t    Inject: _apiInject.Inject,\n\t    Controller: _apiController.Controller,\n\t    Service: _apiService.Service,\n\t    Filter: _apiFilter.Filter,\n\t    bootstrap: _apiBootstrap.bootstrap,\n\t    State: _apiState.State,\n\t\n\t    options: _apiOptions.options,\n\t    Options: _apiOptions.Options,\n\t\n\t    MeteorMethod: _apiMeteorMethod.MeteorMethod,\n\t\n\t    Directive: _apiComponent.Component,\n\t    Injectable: _apiService.Service\n\t};\n\t\n\tfunction init() {\n\t    _common.common.isCordova = typeof cordova !== 'undefined';\n\t    _common.common.angularModule = angular.module;\n\t}\n\t\n\tif (typeof Meteor === 'undefined') {\n\t    init();\n\t}\n\t\n\texports['default'] = angular2now;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar common = {\n\t  angularModule: undefined,\n\t  currentModule: undefined,\n\t  currentNameSpace: undefined,\n\t  isCordova: false,\n\t  ng2nOptions: {\n\t    currentModule: function currentModule() {\n\t      return common.currentModule;\n\t    }\n\t  },\n\t  controllerAs: undefined,\n\t  $q: angular.injector(['ng']).get('$q')\n\t};\n\texports.common = common;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.SetModule = SetModule;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tfunction SetModule() {\n\t  /**\r\n\t   * Name-spacing applies to provider names, not modules. Each module\r\n\t   * has to have a unique name of it's own.\r\n\t   *\r\n\t   * A namespace may be specified like this:\r\n\t   *     SetModule('ftdesiree:helpers')\r\n\t   * The namespace, once set, will remain in force until removed.\r\n\t   * Remove the namespace like this:\r\n\t   *     angular.module(':helpers')\r\n\t   **/\n\t  _common.common.currentModule = arguments[0].split(':');\n\t\n\t  if (_common.common.currentModule.length === 1) {\n\t    // No namespace, just the module name\n\t    _common.common.currentModule = _common.common.currentModule[0];\n\t  } else {\n\t    // Split off the name-space and module name\n\t    _common.common.currentNameSpace = _common.common.currentModule[0];\n\t    _common.common.currentModule = _common.common.currentModule[1];\n\t\n\t    // Reassign arguments[0] without the namespace\n\t    arguments[0] = _common.common.currentModule;\n\t  }\n\t\n\t  return _common.common.angularModule.apply(angular, arguments);\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.Component = Component;\n\t\n\tvar _view = __webpack_require__(4);\n\t\n\tvar _inject = __webpack_require__(5);\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _utils = __webpack_require__(6);\n\t\n\t//function Directive(options) {\n\t//\n\t//    // A string passed is assumed to be the attribute name of the directive.\n\t//    if (typeof options === 'string')\n\t//        options = { selector: options };\n\t//\n\t//    // Directives have shared scope by default (scope:undefined).\n\t//    // Optionally they can have a new scope created (scope: true).\n\t//    // If you require an isolate scope for your directive then\n\t//    // pass \"scope: { ... }\" in options.\n\t//    if (options && !options.hasOwnProperty('scope'))\n\t//        angular.merge(options, { scope: undefined });\n\t//\n\t//    return Component(options);\n\t//}\n\t\n\tfunction Component(options) {\n\t  options = options || {};\n\t  // Allow shorthand notation of just passing the selector name as a string\n\t  if (typeof options === 'string') options = {\n\t    selector: options\n\t  };\n\t\n\t  return function (target) {\n\t    var isClass = false;\n\t    // service injections, which could also have been specified by using @Inject\n\t    if (options.injectables && options.injectables instanceof Array) {\n\t      target = (0, _inject.Inject)(options.injectables)(target);\n\t    }\n\t    // injectables has been renamed to services\n\t    if (options.services && options.services instanceof Array) {\n\t      target = (0, _inject.Inject)(options.services)(target);\n\t    }\n\t\n\t    // Selector name may be prefixed with a '.', in which case \"restrict: 'C'\" will be used\n\t    options.selector = (0, _utils.camelCase)(options.selector || '') + '';\n\t    if (options.selector[0] === '.') {\n\t      isClass = true;\n\t      options.selector = options.selector.slice(1);\n\t    }\n\t\n\t    // Save the unCamelCased selector name, so that bootstrap() can use it\n\t    target.selector = (0, _utils.unCamelCase)(options.selector);\n\t\n\t    // template options can be set with Component or with View\n\t    // so, we run View on the passed in options first.\n\t    if (options.template || options.templateUrl || options.transclude || options.directives) (0, _view.View)(options)(target);\n\t\n\t    // The template(Url) can also be passed in from the @View decorator\n\t    options.template = target.template || undefined;\n\t    options.templateUrl = target.templateUrl || undefined;\n\t\n\t    // Build the require array.\n\t    // Our controller needs the same injections as the component's controller,\n\t    // but with the \"@*\" injections renamed to \"$scope\". The link function will pass\n\t    // the \"@*\" injections directly to the component controller.\n\t    var requiredControllers = [options.selector];\n\t    target.$inject = target.$inject || [];\n\t    target.$inject = target.$inject.map(function (dep) {\n\t      if (/^@[^]{0,2}/.test(dep[0])) {\n\t        requiredControllers.push('?' + dep.slice(1));\n\t        dep = 'delete-me';\n\t      }\n\t      return dep;\n\t    });\n\t\n\t    // Remove all the 'delete-me' entries\n\t    target.$inject = target.$inject.filter(function (v) {\n\t      return v !== 'delete-me';\n\t    });\n\t\n\t    // Remember the original $inject, as it will be needed in the link function.\n\t    // In the link function we will receive any requested component controllers\n\t    // which we will then inject into the arguments that we will pass to the\n\t    // actual constructor of our component.\n\t    target.$injectDefer = target.$inject || [];\n\t\n\t    // Create the angular directive\n\t    var ddo = {\n\t      controllerAs: options.controllerAs || _common.common.controllerAs || target.controllerAs || options.selector,\n\t      bindToController: typeof target.bindToController === 'boolean' ? target.bindToController : true,\n\t      restrict: options.template + options.templateUrl ? 'EA' : isClass ? 'C' : 'A',\n\t      scope: {},\n\t      template: options.template,\n\t      templateUrl: options.templateUrl,\n\t      controller: target,\n\t      replace: options.replace || false,\n\t      transclude: /ng-transclude/i.test(options.template) || target.transclude,\n\t      require: options.require || target.require || requiredControllers,\n\t      link: options.link || target.link || link\n\t    };\n\t\n\t    // ddo's restrict\n\t    if (options.restrict) {\n\t      ddo.restrict = options.restrict;\n\t    }\n\t    // ddo's scope\n\t    if (target.hasOwnProperty('scope')) {\n\t      ddo.scope = target.scope;\n\t    } else if (options.hasOwnProperty('scope')) {\n\t      ddo.scope = options.scope;\n\t    } else if (options['bind']) {\n\t      ddo.scope = options['bind'];\n\t    }\n\t\n\t    try {\n\t      angular.module(_common.common.currentModule).directive(options.selector, function () {\n\t        return ddo;\n\t      });\n\t    } catch (er) {\n\t      throw new Error('Does module \"' + _common.common.currentModule + '\" exist? You may need to use angular.module(\"youModuleName\").');\n\t    }\n\t\n\t    return target;\n\t\n\t    function link(scope, el, attr, controllers) {\n\t      // Create a service with the same name as the selector\n\t      // That holds a reference to our component\n\t      //angular.module(currentModule).value(camelCase(target.selector), controllers[0]);\n\t\n\t      // Alternate syntax for the injection of other component's controllers\n\t      if (controllers[0].$dependson) {\n\t        controllers[0].$dependson.apply(controllers[0], controllers.slice(1));\n\t      }\n\t    }\n\t  };\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.View = View;\n\t\n\tfunction View(options) {\n\t  options = options || {};\n\t  // Allow shorthand notation of just passing the templateUrl as a string\n\t  if (typeof options === 'string') options = {\n\t    templateUrl: options\n\t  };\n\t\n\t  //if (!options.template) options.template = undefined;\n\t\n\t  return function (target) {\n\t    target.template = options.template || target.template;\n\t    target.templateUrl = options.templateUrl || target.templateUrl;\n\t\n\t    // When a templateUrl is specified in options, then transclude can also be specified\n\t    target.transclude = options.transclude || target.transclude;\n\t\n\t    // directives is an array of child directive controllers (Classes)\n\t    target.directives = options.directives || target.directives;\n\t\n\t    // Check for the new <content> tag and add ng-transclude to it, if not there.\n\t    if (target.template) target.template = transcludeContent(target.template);\n\t\n\t    return target;\n\t  };\n\t\n\t  // If template contains the new <content> tag then add ng-transclude to it.\n\t  // This will be picked up in @Component, where ddo.transclude will be set to true.\n\t  function transcludeContent(template) {\n\t    var s = (template || '').match(/\\<content[ >]([^\\>]+)/i);\n\t\n\t    if (s && s[1].toLowerCase().indexOf('ng-transclude') === -1) {\n\t      template = template.replace(/\\<content/i, '<content ng-transclude');\n\t    }\n\t\n\t    return template;\n\t  }\n\t}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.Inject = Inject;\n\t\n\tvar _utils = __webpack_require__(6);\n\t\n\t// 2015-09-01 Replaced the whole Inject function with a new more flexible version.\n\t// Thanks to Steven Weingärtner for his code, which works with both Classes and Methods,\n\t// as well as preserving injectables from a parent class (when extending a parent class).\n\t// New features:\n\t// - Dependencies can be passed in as arguments, not requiring the array wrapper. The\n\t//   original syntax with the array wrapper is still supported.\n\t// - Methods of a class can now be Injected also\n\t// - Child classes will inherit the parent class's injectables, which will be appended\n\t//   to the end of the child's dependencies\n\t\n\tfunction Inject() {\n\t  var deps = undefined;\n\t\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  if (args[0] instanceof Array) {\n\t    deps = args[0];\n\t  } else {\n\t    deps = args;\n\t  }\n\t\n\t  if (deps.length === 0) {\n\t    throw new Error('@Inject: No dependencies passed in');\n\t  }\n\t\n\t  return function (target, name, descriptor) {\n\t    var injectable = target;\n\t\n\t    if (descriptor) {\n\t      injectable = descriptor.value;\n\t    }\n\t\n\t    if (!injectable) {\n\t      throw new TypeError('@Inject can only be used with classes or class methods.');\n\t    }\n\t\n\t    var existingInjects = injectable.$inject;\n\t\n\t    injectable.$inject = [];\n\t\n\t    deps.forEach(function (dep) {\n\t      // Namespace any injectables without an existing nameSpace prefix and also\n\t      // not already prefixed with '$', '@' or '@^'.\n\t      if (dep[0] !== '$' && dep[0] !== '@' && dep.indexOf('_') === -1) {\n\t        dep = (0, _utils.nameSpace)(dep);\n\t      }\n\t\n\t      if (injectable.$inject.indexOf(dep) === -1) {\n\t        injectable.$inject.push(dep);\n\t      }\n\t    });\n\t\n\t    if (existingInjects) {\n\t      injectable.$inject = injectable.$inject.concat(existingInjects);\n\t    }\n\t\n\t    return descriptor || target;\n\t  };\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.nameSpace = nameSpace;\n\texports.serviceExists = serviceExists;\n\texports.getService = getService;\n\texports.camelCase = camelCase;\n\texports.unCamelCase = unCamelCase;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\t// Create a new name from the concatenation of\n\t// the currentNameSpace and the name argument\n\t\n\tfunction nameSpace(name) {\n\t    return _common.common.currentNameSpace ? _common.common.currentNameSpace + '_' + name : name;\n\t}\n\t\n\t// Does a provider with a specific name exist in the current module\n\t\n\tfunction serviceExists(serviceName) {\n\t    return !!getService(serviceName);\n\t}\n\t\n\tfunction getService(serviceName, moduleName) {\n\t    return angular.module(moduleName || _common.common.currentModule)._invokeQueue.filter(function (v, i) {\n\t        return v[0] === '$provide' && v[2][0] === serviceName;\n\t    })[0];\n\t}\n\t\n\tfunction camelCase(s) {\n\t    return s.replace(/-(.)/g, function (a, b) {\n\t        return b.toUpperCase();\n\t    });\n\t}\n\t\n\tfunction unCamelCase(c) {\n\t    var s = c.replace(/([A-Z])/g, '-$1').replace(/--/g, '-').toLowerCase();\n\t\n\t    if (s[0] === '-') {\n\t        return s.slice(1);\n\t    }\n\t\n\t    return s;\n\t}\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t// Cancels out the automatic creation of isolate scope for the directive,\n\t// because Angular 1.x allows only one isolate scope directive per element.\n\t// This is useful when actually creating directives, which add behaviour\n\t// to an existing element, as opposed to components which are stand alone\n\t// bits of html and behaviour.\n\t// The other way to do this is to pass \"scope: undefined\" to @Component.\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ScopeShared = ScopeShared;\n\t\n\tfunction ScopeShared(target) {\n\t  target.scope = undefined;\n\t  return target;\n\t}\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t// Requests a new scope to be created when the directive is created.\n\t// The other way to do this is to pass \"scope: true\" to @Component.\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ScopeNew = ScopeNew;\n\t\n\tfunction ScopeNew(target) {\n\t  target.scope = true;\n\t  return target;\n\t}\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.Controller = Controller;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _utils = __webpack_require__(6);\n\t\n\tfunction Controller(options) {\n\t    options = options || {};\n\t    // Allow shorthand notation of just passing the name as a string\n\t    if (typeof options === 'string') options = { name: options };\n\t\n\t    return function (target) {\n\t        angular.module(_common.common.currentModule).controller((0, _utils.nameSpace)(options.name), target);\n\t\n\t        return target;\n\t    };\n\t}\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.Service = Service;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _utils = __webpack_require__(6);\n\t\n\tfunction Service(options) {\n\t  options = options || {};\n\t  // Allow shorthand notation of just passing the name as a string\n\t  if (typeof options === 'string') options = {\n\t    name: options\n\t  };\n\t\n\t  return function (target) {\n\t    angular.module(_common.common.currentModule).service((0, _utils.nameSpace)(options.name), target);\n\t    //.factory(options.name, function () { return new target })\n\t\n\t    return target;\n\t  };\n\t}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.Filter = Filter;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _utils = __webpack_require__(6);\n\t\n\tfunction Filter(options) {\n\t  options = options || {};\n\t  // Allow shorthand notation of just passing the name as a string\n\t  if (typeof options === 'string') options = {\n\t    name: options\n\t  };\n\t\n\t  return function (target) {\n\t    filterFunc.$inject = target.$inject;\n\t\n\t    angular.module(_common.common.currentModule).filter((0, _utils.nameSpace)(options.name), filterFunc);\n\t\n\t    function filterFunc() {\n\t      var args = Array.prototype.slice.call(arguments);\n\t      var f = new (Function.prototype.bind.apply(target, [null].concat(args)))();\n\t\n\t      return f;\n\t    }\n\t\n\t    return target;\n\t  };\n\t}\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.bootstrap = bootstrap;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\t/**\r\n\t * Bootstraps the Angular 1.x app.\r\n\t *\r\n\t * @param ?target   undefined | string | class\r\n\t *      undefined:  bootstraps on document and the current angular module\r\n\t *      string:     will use document.querySelector to find the element by this string\r\n\t *      class:      bootstraps on the component defined on this class, looks for selector\r\n\t *\r\n\t * @param ?config   angular.bootstrap() config object, see AngularJS doco\r\n\t */\n\t\n\tfunction bootstrap(target, config) {\n\t  var bootOnDocument = false;\n\t\n\t  if (!target || target && !target.selector && typeof target === 'function') {\n\t    target = {\n\t      selector: _common.common.currentModule\n\t    };\n\t    bootOnDocument = true;\n\t  }\n\t\n\t  // Allow string shortcut for target.selector. Can be the name of any HTML tag.\n\t  if (typeof target === 'string') {\n\t    target = {\n\t      selector: target\n\t    };\n\t  }\n\t\n\t  // Mark this class as a bootstrap component. This allows @State\n\t  // to handle it correctly.\n\t  target.bootstrap = true;\n\t\n\t  var bootModule = target.selector || _common.common.currentModule;\n\t\n\t  if (bootModule !== _common.common.currentModule) angular.module(bootModule);\n\t\n\t  if (!config) config = {\n\t    strictDi: false\n\t  };\n\t\n\t  if (_common.common.isCordova) angular.element(document).on(\"deviceready\", onReady);else angular.element(document).ready(onReady);\n\t\n\t  function onReady() {\n\t    var el = undefined;\n\t\n\t    // Find the component's element\n\t    if (!bootOnDocument) {\n\t      el = document.querySelector(target.selector);\n\t    }\n\t    // Or use document, if user passed no arguments\n\t    else {\n\t        el = document.body;\n\t      }\n\t\n\t    angular.bootstrap(el, [bootModule], config);\n\t  }\n\t}\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.State = State;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _utils = __webpack_require__(6);\n\t\n\t/**\r\n\t * State can be used to annotate either a Component or a class and assign\r\n\t * a ui-router state to it.\r\n\t *\r\n\t * @param options   literal object\r\n\t *      name:              name of the state\r\n\t *      url:               url associated with this state\r\n\t *      template:          template\r\n\t *      templateUrl:       templateUrl\r\n\t *      templateProvider:  templateProvider\r\n\t *      defaultRoute:      truthy = .otherwise(url)\r\n\t *                         string = .otherwise(defaultRoute)\r\n\t *      resolve:           Literal object, see ui-router resolve\r\n\t *      abstract:          true/false\r\n\t *      params:            Literal object, see ui-router doco\r\n\t *      parent:            Define a custom parent state\r\n\t *      controller:        A controller is automatically assigned, but if you need\r\n\t *                         finer control then you can assign your own controller\r\n\t *      controllerAs:      Specify ControllerAs for cases when there is no\r\n\t *                         @Component used\r\n\t *\r\n\t * If a class is annotated then it is assumed to be the controller and\r\n\t * the state name will be used as the name of the injectable service\r\n\t * that will hold any resolves requested.\r\n\t *\r\n\t * When a component is annotated and resolves requested, then the component's\r\n\t * selector name is used as the name of the injectable service that holds\r\n\t * their values.\r\n\t */\n\t\n\tfunction State(options) {\n\t\n\t  if (!options || !(options instanceof Object) || options.name === undefined) {\n\t    throw new Error('@State: Valid options are: name, url, defaultRoute, template, templateUrl, templateProvider, resolve, abstract, parent, data.');\n\t  }\n\t\n\t  return function (target) {\n\t\n\t    var deps = undefined;\n\t    var resolvedServiceName = (0, _utils.nameSpace)((0, _utils.camelCase)(target.selector || (options.name + '').replace('.', '-')));\n\t\n\t    // Indicates if there is anything to resolve\n\t    var doResolve = false;\n\t\n\t    // Values to resolve can either be supplied in options.resolve or as a static method on the\n\t    // component's class\n\t    var resolves = options.resolve || target.resolve;\n\t\n\t    // Is there a resolve block?\n\t    if (resolves && resolves instanceof Object && (deps = Object.keys(resolves)).length) {\n\t      doResolve = true;\n\t    }\n\t\n\t    // Create an injectable value service to share the resolved values with the controller\n\t    // The service bears the same name as the component's camelCased selector name.\n\t    if (doResolve) {\n\t      if (!(0, _utils.serviceExists)(resolvedServiceName)) {\n\t        angular.module(_common.common.currentModule).value(resolvedServiceName, {});\n\t      }\n\t    }\n\t\n\t    // Configure the state\n\t    angular.module(_common.common.currentModule).config(['$urlRouterProvider', '$stateProvider', '$locationProvider', function ($urlRouterProvider, $stateProvider, $locationProvider) {\n\t      // Activate this state, if options.defaultRoute = true.\n\t      // If you don't want this then don't set options.defaultRoute to true\n\t      // and, instead, use $state.go inside the constructor to active a state.\n\t      // You can also pass a string to defaultRoute, which will become the default route.\n\t      if (options.defaultRoute) {\n\t        $urlRouterProvider.otherwise(typeof options.defaultRoute === 'string' ? options.defaultRoute : options.url);\n\t      }\n\t\n\t      // Optionally configure html5Mode\n\t      if (!(typeof options.html5Mode === 'undefined')) {\n\t        $locationProvider.html5Mode(options.html5Mode);\n\t      }\n\t\n\t      // The user can supply a controller through a parameter in options\n\t      // or the class itself can be used as the controller if no component is annotated.\n\t      var userController = options.controller || (!target.selector ? target : undefined);\n\t\n\t      // Also, de-namespace the resolve injectables for ui-router to inject correctly\n\t      if (userController && userController.$inject && userController.$inject.length && deps && deps.length) {\n\t        deps.forEach(function (dep) {\n\t          var i = userController.$inject.indexOf(_common.common.currentNameSpace + '_' + dep);\n\t\n\t          if (i !== -1) {\n\t            userController.$inject[i] = dep;\n\t          }\n\t        });\n\t      }\n\t\n\t      // This is the state definition object\n\t      var sdo = {\n\t        url: options.url,\n\t\n\t        // Default values for URL parameters can be configured here.\n\t        // ALso, parameters that do not appear in the URL can be configured here.\n\t        params: options.params,\n\t\n\t        // The State applied to a bootstrap component can be abstract,\n\t        // if you don't want that state to be able to activate.\n\t        abstract: options.abstract,\n\t\n\t        templateUrl: options.templateUrl,\n\t\n\t        // This is the \"inline\" template, as opposed to the templateUrl.\n\t        // 1) If either options.templateUrl or options.templateProvider is specified then\n\t        //      template will be set to undefined.\n\t        // 2) If options.template is provided then it will be used.\n\t        // 3) Otherwise, if this is a component, but not the bootstrap(**) component,\n\t        //    then we use it's selector to create the inline template \"<selector></selector>\".\n\t        // 4) Otherwise, we provide the following default template \"<div ui-view></div>\".\n\t        //(**) The bootstrap component will be rendered by Angular directly and must not\n\t        //     be rendered again by ui-router, or you will literally see it twice.\n\t        // todo: allow the user to specify their own div/span instead of forcing \"div(ui-view)\"\n\t        template: (target.template || target.templateUrl) && !target.bootstrap && target.selector ? target.selector.replace(/^(.*)$/, '<$1></$1>') : '<div ui-view=\"\"></div>',\n\t\n\t        // The option for dynamically setting a template based on local values\n\t        //  or injectable services\n\t        templateProvider: options.templateProvider,\n\t\n\t        // Do we need to resolve stuff? If so, then we also provide a controller to catch the resolved data.\n\t        resolve: resolves,\n\t\n\t        // A user supplied controller OR\n\t        // An internally created proxy controller, if resolves were requested for a Component.\n\t        controller: doResolve ? controller : undefined,\n\t\n\t        // Optionally controllerAs can be specifically set for those situations,\n\t        // when we use @State on a class and there is no @Component defined.\n\t        controllerAs: _common.common.ng2nOptions.hasOwnProperty('controllerAs') && !target.hasOwnProperty('selector') ? _common.common.ng2nOptions.controllerAs : undefined,\n\t\n\t        // onEnter and onExit events\n\t        onEnter: options.onEnter,\n\t        onExit: options.onExit,\n\t\n\t        // Custom parent State\n\t        parent: options.parent,\n\t\n\t        // Custom data\n\t        data: options.data\n\t      };\n\t\n\t      // sdo's template\n\t      if (options.templateUrl) {\n\t        sdo.template = options.templateUrl;\n\t      } else if (options.templateProvider) {\n\t        sdo.template = undefined;\n\t      } else if (options.template) {\n\t        sdo.template = options.templateUrl;\n\t      }\n\t\n\t      // sdo's controller\n\t      if (userController) {\n\t        sdo.controller = userController;\n\t      }\n\t\n\t      // sdo's controllerAs\n\t      if (target.controllerAs) {\n\t        sdo.controllerAs = target.controllerAs;\n\t      } else if (options.controllerAs) {\n\t        sdo.controllerAs = options.controllerAs;\n\t      }\n\t\n\t      // Create the state\n\t      $stateProvider.state(options.name, sdo);\n\t\n\t      // When our automatic controller is used, we inject the resolved values into it,\n\t      // along with the injectable service that will be used to publish them.\n\t      // If the user supplied a controller than we do not inject anything\n\t      if (doResolve) {\n\t        deps.unshift(resolvedServiceName);\n\t\n\t        controller.$inject = deps;\n\t      }\n\t\n\t      // Populate the published service with the resolved values\n\t      function controller() {\n\t        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t          args[_key] = arguments[_key];\n\t        }\n\t\n\t        // This is the service that we \"unshifted\" earlier\n\t        localScope = args[0];\n\t\n\t        args = args.slice(1);\n\t\n\t        // Now we copy the resolved values to the service.\n\t        // This service can be injected into a component's constructor, for example.\n\t        deps.slice(1).forEach(function (v, i) {\n\t          localScope[v] = args[i];\n\t        });\n\t      }\n\t    }]);\n\t\n\t    return target;\n\t  };\n\t}\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.options = options;\n\texports.Options = Options;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\tvar _setModule = __webpack_require__(2);\n\t\n\t// Allow configuration of some angular2-now default settings\n\t// controllerAs: if provided, will user this string instead of component name, for example \"vm\"\n\t\n\tfunction options(options) {\n\t  if (!options) {\n\t    return _common.common.ng2nOptions;\n\t  }\n\t\n\t  if (typeof options.controllerAs !== 'undefined') {\n\t    _common.common.controllerAs = options.controllerAs;\n\t  }\n\t\n\t  // Optional spinner object can be registered. It must expose show() and hide() methods.\n\t  // The spinner will be activated before any I/O operations and deactivated once they complete.\n\t  _common.common.ng2nOptions.spinner = options.spinner || {\n\t    show: angular.noop,\n\t    hide: angular.noop\n\t  };\n\t\n\t  // events expose beforeCall() and afterCall().\n\t  // beforeCall() will be called before any I/O operations.\n\t  // afterCall() will be called after any I/O operations have completed.\n\t  _common.common.ng2nOptions.events = options.events || {\n\t    beforeCall: angular.noop,\n\t    afterCall: angular.noop\n\t  };\n\t\n\t  // The noConflict option allows us to control whether or not angular2-now\n\t  // monkey-patches angular.module.\n\t  //  true = don't monkey patch.\n\t  //  false = (default for versions < 0.4.0)  DO monkey patch angular.module\n\t  //          for backwards compatibility\n\t  if (typeof options.noConflict !== 'undefined') {\n\t    angular.module = options.noConflict ? _common.common.angularModule : _setModule.SetModule;\n\t  }\n\t}\n\t\n\tfunction Options(options) {\n\t  return function (target) {\n\t    angular.merge(_common.common.ng2nOptions, options);\n\t    return target;\n\t  };\n\t}\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.MeteorMethod = MeteorMethod;\n\t\n\tvar _common = __webpack_require__(1);\n\t\n\t// The name of the Meteor.method is the same as the name of class method.\n\t\n\tfunction MeteorMethod(_options) {\n\t  var options = angular.merge({}, _common.common.ng2nOptions, _options);\n\t  var spinner = options.spinner || {\n\t    show: angular.noop,\n\t    hide: angular.noop\n\t  };\n\t  var events = options.events || {\n\t    beforeCall: angular.noop,\n\t    afterCall: angular.noop\n\t  };\n\t\n\t  return function (target, name, descriptor) {\n\t\n\t    // Create a method that calls the back-end\n\t    descriptor.value = function () {\n\t      var argv = Array.prototype.slice.call(arguments);\n\t      var deferred = _common.common.$q.defer();\n\t\n\t      if (typeof spinner === 'string') {\n\t        if (angular.injector(['ng', _common.common.currentModule]).has(options.spinner)) {\n\t          spinner = angular.injector(['ng', _common.common.currentModule]).get(options.spinner);\n\t          options.spinner = spinner;\n\t        } else throw new Error('Spinner \"' + spinner + '\" does not exist.');\n\t      }\n\t\n\t      argv.unshift(name);\n\t      argv.push(resolver);\n\t\n\t      if (spinner) {\n\t        spinner.show();\n\t      }\n\t\n\t      if (events.beforeCall) {\n\t        events.beforeCall();\n\t      }\n\t      // Call optional events.beforeCall()\n\t\n\t      // todo: should call Meteor after resolution of promise returned by beforeCall()\n\t      Meteor.call.apply(this, argv);\n\t\n\t      deferred.promise['finally'](function () {\n\t        spinner.hide();\n\t        // Call optional events.afterCall()\n\t        if (events.afterCall) {\n\t          events.afterCall();\n\t        }\n\t      });\n\t\n\t      return deferred.promise;\n\t\n\t      function resolver(err, data) {\n\t        if (err) {\n\t          deferred.reject(err);\n\t        } else {\n\t          deferred.resolve(data);\n\t        }\n\t      }\n\t    };\n\t\n\t    return descriptor;\n\t  };\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** dist/angular2-now.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 215c737197ce57ee7025\n **/","import { common } from './common';\r\nimport { SetModule } from './api/set-module';\r\nimport { Component } from './api/component';\r\nimport { ScopeShared } from './api/scope-shared';\r\nimport { ScopeNew } from './api/scope-new';\r\nimport { View } from './api/view';\r\nimport { Inject } from './api/inject';\r\nimport { Controller } from './api/controller';\r\nimport { Service } from './api/service';\r\nimport { Filter } from './api/filter';\r\nimport { bootstrap } from './api/bootstrap';\r\nimport { State } from './api/state';\r\nimport { options, Options } from './api/options';\r\nimport { MeteorMethod } from './api/meteor-method';\r\n\r\nconst angular2now = {\r\n    init,\r\n\r\n    SetModule,\r\n\r\n    Component,\r\n    ScopeShared,\r\n    ScopeNew,\r\n    View,\r\n    Inject,\r\n    Controller,\r\n    Service,\r\n    Filter,\r\n    bootstrap,\r\n    State,\r\n\r\n    options,\r\n    Options,\r\n\r\n    MeteorMethod,\r\n\r\n    Directive:   Component,\r\n    Injectable:  Service\r\n};\r\n\r\nfunction init() {\r\n    common.isCordova = typeof cordova !== 'undefined';\r\n    common.angularModule = angular.module;\r\n}\r\n\r\nif(typeof Meteor === 'undefined') {\r\n  init();\r\n}\r\n\r\nexport default angular2now;\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/angular2-now.js\n **/","export const common = {\r\n  angularModule: undefined,\r\n  currentModule: undefined,\r\n  currentNameSpace: undefined,\r\n  isCordova: false,\r\n  ng2nOptions: {\r\n    currentModule() {\r\n      return common.currentModule;\r\n    }\r\n  },\r\n  controllerAs: undefined,\r\n  $q: angular.injector(['ng']).get('$q')\r\n};\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/common.js\n **/","import { common } from './../common';\r\n\r\nexport function SetModule() {\r\n  /**\r\n   * Name-spacing applies to provider names, not modules. Each module\r\n   * has to have a unique name of it's own.\r\n   *\r\n   * A namespace may be specified like this:\r\n   *     SetModule('ftdesiree:helpers')\r\n   * The namespace, once set, will remain in force until removed.\r\n   * Remove the namespace like this:\r\n   *     angular.module(':helpers')\r\n   **/\r\n  common.currentModule = arguments[0].split(':');\r\n\r\n  if (common.currentModule.length === 1) {\r\n    // No namespace, just the module name\r\n    common.currentModule = common.currentModule[0];\r\n  } else {\r\n    // Split off the name-space and module name\r\n    common.currentNameSpace = common.currentModule[0];\r\n    common.currentModule = common.currentModule[1];\r\n\r\n    // Reassign arguments[0] without the namespace\r\n    arguments[0] = common.currentModule;\r\n  }\r\n\r\n  return common.angularModule.apply(angular, arguments);\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/set-module.js\n **/","import { View } from './view';\r\nimport { Inject } from './inject';\r\nimport { common } from './../common';\r\nimport { camelCase, unCamelCase } from './../utils';\r\n\r\n//function Directive(options) {\r\n//\r\n//    // A string passed is assumed to be the attribute name of the directive.\r\n//    if (typeof options === 'string')\r\n//        options = { selector: options };\r\n//\r\n//    // Directives have shared scope by default (scope:undefined).\r\n//    // Optionally they can have a new scope created (scope: true).\r\n//    // If you require an isolate scope for your directive then\r\n//    // pass \"scope: { ... }\" in options.\r\n//    if (options && !options.hasOwnProperty('scope'))\r\n//        angular.merge(options, { scope: undefined });\r\n//\r\n//    return Component(options);\r\n//}\r\n\r\nexport function Component(options) {\r\n  options = options || {};\r\n  // Allow shorthand notation of just passing the selector name as a string\r\n  if (typeof options === 'string')\r\n    options = {\r\n      selector: options\r\n    };\r\n\r\n  return function(target) {\r\n    let isClass = false;\r\n    // service injections, which could also have been specified by using @Inject\r\n    if (options.injectables && options.injectables instanceof Array) {\r\n      target = Inject(options.injectables)(target);\r\n    }\r\n    // injectables has been renamed to services\r\n    if (options.services && options.services instanceof Array) {\r\n      target = Inject(options.services)(target);\r\n    }\r\n\r\n    // Selector name may be prefixed with a '.', in which case \"restrict: 'C'\" will be used\r\n    options.selector = camelCase(options.selector || '') + '';\r\n    if (options.selector[0] === '.') {\r\n      isClass = true;\r\n      options.selector = options.selector.slice(1);\r\n    }\r\n\r\n    // Save the unCamelCased selector name, so that bootstrap() can use it\r\n    target.selector = unCamelCase(options.selector);\r\n\r\n    // template options can be set with Component or with View\r\n    // so, we run View on the passed in options first.\r\n    if (options.template || options.templateUrl || options.transclude || options.directives)\r\n      View(options)(target);\r\n\r\n    // The template(Url) can also be passed in from the @View decorator\r\n    options.template = target.template || undefined;\r\n    options.templateUrl = target.templateUrl || undefined;\r\n\r\n    // Build the require array.\r\n    // Our controller needs the same injections as the component's controller,\r\n    // but with the \"@*\" injections renamed to \"$scope\". The link function will pass\r\n    // the \"@*\" injections directly to the component controller.\r\n    const requiredControllers = [options.selector];\r\n    target.$inject = target.$inject || [];\r\n    target.$inject = target.$inject.map(function(dep) {\r\n      if (/^@[^]{0,2}/.test(dep[0])) {\r\n        requiredControllers.push('?' + dep.slice(1));\r\n        dep = 'delete-me'\r\n      }\r\n      return dep;\r\n    });\r\n\r\n    // Remove all the 'delete-me' entries\r\n    target.$inject = target.$inject.filter(function(v) {\r\n      return v !== 'delete-me';\r\n    });\r\n\r\n    // Remember the original $inject, as it will be needed in the link function.\r\n    // In the link function we will receive any requested component controllers\r\n    // which we will then inject into the arguments that we will pass to the\r\n    // actual constructor of our component.\r\n    target.$injectDefer = target.$inject || [];\r\n\r\n    // Create the angular directive\r\n    const ddo = {\r\n      controllerAs: options.controllerAs || common.controllerAs || target.controllerAs || options.selector,\r\n      bindToController: typeof target.bindToController === 'boolean' ? target.bindToController : true,\r\n      restrict: (options.template + options.templateUrl) ? 'EA' : isClass ? 'C' : 'A',\r\n      scope: {},\r\n      template: options.template,\r\n      templateUrl: options.templateUrl,\r\n      controller: target,\r\n      replace: options.replace || false,\r\n      transclude: /ng-transclude/i.test(options.template) || target.transclude,\r\n      require: options.require || target.require || requiredControllers,\r\n      link: options.link || target.link || link\r\n    };\r\n\r\n    // ddo's restrict\r\n    if (options.restrict) {\r\n      ddo.restrict = options.restrict;\r\n    }\r\n    // ddo's scope\r\n    if (target.hasOwnProperty('scope')) {\r\n      ddo.scope = target.scope;\r\n    } else if (options.hasOwnProperty('scope')) {\r\n      ddo.scope = options.scope;\r\n    } else if (options['bind']) {\r\n      ddo.scope = options['bind'];\r\n    }\r\n\r\n\r\n    try {\r\n      angular.module(common.currentModule)\r\n        .directive(options.selector, () => ddo);\r\n    } catch (er) {\r\n      throw new Error('Does module \"' + common.currentModule + '\" exist? You may need to use angular.module(\"youModuleName\").');\r\n    }\r\n\r\n    return target;\r\n\r\n    function link(scope, el, attr, controllers) {\r\n      // Create a service with the same name as the selector\r\n      // That holds a reference to our component\r\n      //angular.module(currentModule).value(camelCase(target.selector), controllers[0]);\r\n\r\n      // Alternate syntax for the injection of other component's controllers\r\n      if (controllers[0].$dependson) {\r\n        controllers[0].$dependson.apply(controllers[0], controllers.slice(1));\r\n      }\r\n    }\r\n  };\r\n\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/component.js\n **/","export function View(options) {\r\n  options = options || {};\r\n  // Allow shorthand notation of just passing the templateUrl as a string\r\n  if (typeof options === 'string')\r\n    options = {\r\n      templateUrl: options\r\n    };\r\n\r\n  //if (!options.template) options.template = undefined;\r\n\r\n  return function(target) {\r\n    target.template = options.template || target.template;\r\n    target.templateUrl = options.templateUrl || target.templateUrl;\r\n\r\n    // When a templateUrl is specified in options, then transclude can also be specified\r\n    target.transclude = options.transclude || target.transclude;\r\n\r\n    // directives is an array of child directive controllers (Classes)\r\n    target.directives = options.directives || target.directives;\r\n\r\n    // Check for the new <content> tag and add ng-transclude to it, if not there.\r\n    if (target.template)\r\n      target.template = transcludeContent(target.template);\r\n\r\n    return target;\r\n  };\r\n\r\n  // If template contains the new <content> tag then add ng-transclude to it.\r\n  // This will be picked up in @Component, where ddo.transclude will be set to true.\r\n  function transcludeContent(template) {\r\n    const s = (template || '').match(/\\<content[ >]([^\\>]+)/i);\r\n\r\n    if (s && s[1].toLowerCase().indexOf('ng-transclude') === -1) {\r\n      template = template.replace(/\\<content/i, '<content ng-transclude');\r\n    }\r\n    \r\n    return template;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/view.js\n **/","import { nameSpace } from './../utils';\r\n\r\n// 2015-09-01 Replaced the whole Inject function with a new more flexible version.\r\n// Thanks to Steven Weingärtner for his code, which works with both Classes and Methods,\r\n// as well as preserving injectables from a parent class (when extending a parent class).\r\n// New features:\r\n// - Dependencies can be passed in as arguments, not requiring the array wrapper. The\r\n//   original syntax with the array wrapper is still supported.\r\n// - Methods of a class can now be Injected also\r\n// - Child classes will inherit the parent class's injectables, which will be appended\r\n//   to the end of the child's dependencies\r\nexport function Inject(...args) {\r\n  let deps;\r\n\r\n  if (args[0] instanceof Array) {\r\n    deps = args[0];\r\n  } else {\r\n    deps = args;\r\n  }\r\n\r\n  if (deps.length === 0) {\r\n    throw new Error('@Inject: No dependencies passed in');\r\n  }\r\n\r\n  return function(target, name, descriptor) {\r\n    let injectable = target;\r\n\r\n    if (descriptor) {\r\n      injectable = descriptor.value;\r\n    }\r\n\r\n    if (!injectable) {\r\n      throw new TypeError('@Inject can only be used with classes or class methods.')\r\n    }\r\n\r\n    const existingInjects = injectable.$inject;\r\n\r\n    injectable.$inject = [];\r\n\r\n    deps.forEach((dep) => {\r\n      // Namespace any injectables without an existing nameSpace prefix and also\r\n      // not already prefixed with '$', '@' or '@^'.\r\n      if (dep[0] !== '$' && dep[0] !== '@' && dep.indexOf('_') === -1) {\r\n        dep = nameSpace(dep);\r\n      }\r\n\r\n      if (injectable.$inject.indexOf(dep) === -1) {\r\n        injectable.$inject.push(dep);\r\n      }\r\n    });\r\n\r\n    if (existingInjects) {\r\n      injectable.$inject = injectable.$inject.concat(existingInjects);\r\n    }\r\n\r\n    return descriptor || target;\r\n  };\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/inject.js\n **/","import { common } from './common';\r\n\r\n// Create a new name from the concatenation of\r\n// the currentNameSpace and the name argument\r\nexport function nameSpace(name) {\r\n  return common.currentNameSpace ? common.currentNameSpace + '_' + name : name;\r\n}\r\n\r\n// Does a provider with a specific name exist in the current module\r\nexport function serviceExists(serviceName) {\r\n    return !!getService(serviceName);\r\n}\r\n\r\nexport function getService(serviceName, moduleName) {\r\n    return angular.module(moduleName || common.currentModule)\r\n        ._invokeQueue\r\n        .filter((v, i) => v[0] === '$provide' && v[2][0] === serviceName)[0];\r\n}\r\n\r\nexport function camelCase(s) {\r\n    return s.replace(/-(.)/g, (a, b) => b.toUpperCase());\r\n}\r\n\r\nexport function unCamelCase(c) {\r\n    const s = c.replace(/([A-Z])/g, '-$1')\r\n             .replace(/--/g, '-')\r\n             .toLowerCase();\r\n\r\n    if (s[0] === '-') {\r\n      return s.slice(1);\r\n    }\r\n\r\n    return s;\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/utils.js\n **/","// Cancels out the automatic creation of isolate scope for the directive,\r\n// because Angular 1.x allows only one isolate scope directive per element.\r\n// This is useful when actually creating directives, which add behaviour\r\n// to an existing element, as opposed to components which are stand alone\r\n// bits of html and behaviour.\r\n// The other way to do this is to pass \"scope: undefined\" to @Component.\r\nexport function ScopeShared(target) {\r\n  target.scope = undefined;\r\n  return target\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/scope-shared.js\n **/","// Requests a new scope to be created when the directive is created.\r\n// The other way to do this is to pass \"scope: true\" to @Component.\r\nexport function ScopeNew(target) {\r\n  target.scope = true;\r\n  return target\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/scope-new.js\n **/","import { common } from './../common';\r\nimport { nameSpace } from './../utils';\r\n\r\nexport function Controller(options) {\r\n    options = options || {};\r\n    // Allow shorthand notation of just passing the name as a string\r\n    if (typeof options === 'string')\r\n        options = { name: options };\r\n\r\n    return function (target) {\r\n        angular.module(common.currentModule)\r\n            .controller(nameSpace(options.name), target);\r\n\r\n        return target;\r\n    };\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/controller.js\n **/","import { common } from './../common';\r\nimport { nameSpace } from './../utils';\r\n\r\nexport function Service(options) {\r\n  options = options || {};\r\n  // Allow shorthand notation of just passing the name as a string\r\n  if (typeof options === 'string')\r\n    options = {\r\n      name: options\r\n    };\r\n\r\n  return function(target) {\r\n    angular.module(common.currentModule)\r\n      .service(nameSpace(options.name), target);\r\n    //.factory(options.name, function () { return new target })\r\n\r\n    return target;\r\n  };\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/service.js\n **/","import { common } from './../common';\r\nimport { nameSpace } from './../utils';\r\n\r\nexport function Filter(options) {\r\n  options = options || {};\r\n  // Allow shorthand notation of just passing the name as a string\r\n  if (typeof options === 'string')\r\n    options = {\r\n      name: options\r\n    };\r\n\r\n  return function(target) {\r\n    filterFunc.$inject = target.$inject;\r\n\r\n    angular.module(common.currentModule)\r\n      .filter(nameSpace(options.name), filterFunc);\r\n\r\n    function filterFunc() {\r\n      const args = Array.prototype.slice.call(arguments);\r\n      const f = new(Function.prototype.bind.apply(target, [null].concat(args)));\r\n\r\n      return f;\r\n    }\r\n\r\n    return target;\r\n  };\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/filter.js\n **/","import { common } from './../common';\r\n\r\n/**\r\n * Bootstraps the Angular 1.x app.\r\n *\r\n * @param ?target   undefined | string | class\r\n *      undefined:  bootstraps on document and the current angular module\r\n *      string:     will use document.querySelector to find the element by this string\r\n *      class:      bootstraps on the component defined on this class, looks for selector\r\n *\r\n * @param ?config   angular.bootstrap() config object, see AngularJS doco\r\n */\r\nexport function bootstrap(target, config) {\r\n  let bootOnDocument = false;\r\n\r\n  if (!target || (target && !target.selector && typeof target === 'function')) {\r\n    target = {\r\n      selector: common.currentModule\r\n    };\r\n    bootOnDocument = true;\r\n  }\r\n\r\n  // Allow string shortcut for target.selector. Can be the name of any HTML tag.\r\n  if (typeof target === 'string') {\r\n    target = {\r\n      selector: target\r\n    };\r\n  }\r\n\r\n  // Mark this class as a bootstrap component. This allows @State\r\n  // to handle it correctly.\r\n  target.bootstrap = true;\r\n\r\n  const bootModule = target.selector || common.currentModule;\r\n\r\n  if (bootModule !== common.currentModule)\r\n    angular.module(bootModule);\r\n\r\n  if (!config)\r\n    config = {\r\n      strictDi: false\r\n    };\r\n\r\n  if (common.isCordova)\r\n    angular.element(document).on(\"deviceready\", onReady);\r\n  else\r\n    angular.element(document).ready(onReady);\r\n\r\n  function onReady() {\r\n    let el;\r\n\r\n    // Find the component's element\r\n    if (!bootOnDocument) {\r\n      el = document.querySelector(target.selector);\r\n    }\r\n    // Or use document, if user passed no arguments\r\n    else {\r\n      el = document.body;\r\n    }\r\n\r\n    angular.bootstrap(el, [bootModule], config);\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/bootstrap.js\n **/","import {\r\n  common\r\n}\r\nfrom './../common';\r\nimport {\r\n  serviceExists, nameSpace, camelCase\r\n}\r\nfrom './../utils';\r\n\r\n/**\r\n * State can be used to annotate either a Component or a class and assign\r\n * a ui-router state to it.\r\n *\r\n * @param options   literal object\r\n *      name:              name of the state\r\n *      url:               url associated with this state\r\n *      template:          template\r\n *      templateUrl:       templateUrl\r\n *      templateProvider:  templateProvider\r\n *      defaultRoute:      truthy = .otherwise(url)\r\n *                         string = .otherwise(defaultRoute)\r\n *      resolve:           Literal object, see ui-router resolve\r\n *      abstract:          true/false\r\n *      params:            Literal object, see ui-router doco\r\n *      parent:            Define a custom parent state\r\n *      controller:        A controller is automatically assigned, but if you need\r\n *                         finer control then you can assign your own controller\r\n *      controllerAs:      Specify ControllerAs for cases when there is no\r\n *                         @Component used\r\n *\r\n * If a class is annotated then it is assumed to be the controller and\r\n * the state name will be used as the name of the injectable service\r\n * that will hold any resolves requested.\r\n *\r\n * When a component is annotated and resolves requested, then the component's\r\n * selector name is used as the name of the injectable service that holds\r\n * their values.\r\n */\r\nexport function State(options) {\r\n\r\n  if (!options || !(options instanceof Object) || options.name === undefined) {\r\n    throw new Error('@State: Valid options are: name, url, defaultRoute, template, templateUrl, templateProvider, resolve, abstract, parent, data.');\r\n  }\r\n\r\n  return function(target) {\r\n\r\n    let deps;\r\n    const resolvedServiceName = nameSpace(camelCase(target.selector || (options.name + '').replace('.', '-')));\r\n\r\n    // Indicates if there is anything to resolve\r\n    let doResolve = false;\r\n\r\n    // Values to resolve can either be supplied in options.resolve or as a static method on the\r\n    // component's class\r\n    const resolves = options.resolve || target.resolve;\r\n\r\n    // Is there a resolve block?\r\n    if (resolves && resolves instanceof Object && (deps = Object.keys(resolves)).length) {\r\n      doResolve = true;\r\n    }\r\n\r\n    // Create an injectable value service to share the resolved values with the controller\r\n    // The service bears the same name as the component's camelCased selector name.\r\n    if (doResolve) {\r\n      if (!serviceExists(resolvedServiceName)) {\r\n        angular.module(common.currentModule).value(resolvedServiceName, {});\r\n      }\r\n    }\r\n\r\n    // Configure the state\r\n    angular.module(common.currentModule)\r\n      .config(['$urlRouterProvider', '$stateProvider', '$locationProvider',\r\n        function($urlRouterProvider, $stateProvider, $locationProvider) {\r\n          // Activate this state, if options.defaultRoute = true.\r\n          // If you don't want this then don't set options.defaultRoute to true\r\n          // and, instead, use $state.go inside the constructor to active a state.\r\n          // You can also pass a string to defaultRoute, which will become the default route.\r\n          if (options.defaultRoute) {\r\n            $urlRouterProvider.otherwise((typeof options.defaultRoute === 'string') ? options.defaultRoute : options.url);\r\n          }\r\n\r\n          // Optionally configure html5Mode\r\n          if (!(typeof options.html5Mode === 'undefined')) {\r\n            $locationProvider.html5Mode(options.html5Mode);\r\n          }\r\n\r\n          // The user can supply a controller through a parameter in options\r\n          // or the class itself can be used as the controller if no component is annotated.\r\n          const userController = options.controller || (!target.selector ? target : undefined);\r\n\r\n          // Also, de-namespace the resolve injectables for ui-router to inject correctly\r\n          if (userController && userController.$inject && userController.$inject.length && deps && deps.length) {\r\n            deps.forEach(function(dep) {\r\n              const i = userController.$inject.indexOf(common.currentNameSpace + '_' + dep);\r\n\r\n              if (i !== -1) {\r\n                userController.$inject[i] = dep;\r\n              }\r\n            });\r\n          }\r\n\r\n\r\n          // This is the state definition object\r\n          const sdo = {\r\n            url: options.url,\r\n\r\n            // Default values for URL parameters can be configured here.\r\n            // ALso, parameters that do not appear in the URL can be configured here.\r\n            params: options.params,\r\n\r\n            // The State applied to a bootstrap component can be abstract,\r\n            // if you don't want that state to be able to activate.\r\n            abstract: options.abstract,\r\n\r\n            templateUrl: options.templateUrl,\r\n\r\n            // This is the \"inline\" template, as opposed to the templateUrl.\r\n            // 1) If either options.templateUrl or options.templateProvider is specified then\r\n            //      template will be set to undefined.\r\n            // 2) If options.template is provided then it will be used.\r\n            // 3) Otherwise, if this is a component, but not the bootstrap(**) component,\r\n            //    then we use it's selector to create the inline template \"<selector></selector>\".\r\n            // 4) Otherwise, we provide the following default template \"<div ui-view></div>\".\r\n            //(**) The bootstrap component will be rendered by Angular directly and must not\r\n            //     be rendered again by ui-router, or you will literally see it twice.\r\n            // todo: allow the user to specify their own div/span instead of forcing \"div(ui-view)\"\r\n            template: (target.template || target.templateUrl) && !target.bootstrap && target.selector ? target.selector.replace(/^(.*)$/, '<$1></$1>') : '<div ui-view=\"\"></div>',\r\n\r\n            // The option for dynamically setting a template based on local values\r\n            //  or injectable services\r\n            templateProvider: options.templateProvider,\r\n\r\n            // Do we need to resolve stuff? If so, then we also provide a controller to catch the resolved data.\r\n            resolve: resolves,\r\n\r\n            // A user supplied controller OR\r\n            // An internally created proxy controller, if resolves were requested for a Component.\r\n            controller: doResolve ? controller : undefined,\r\n\r\n            // Optionally controllerAs can be specifically set for those situations,\r\n            // when we use @State on a class and there is no @Component defined.\r\n            controllerAs: common.ng2nOptions.hasOwnProperty('controllerAs') && !target.hasOwnProperty('selector') ? common.ng2nOptions.controllerAs : undefined,\r\n\r\n            // onEnter and onExit events\r\n            onEnter: options.onEnter,\r\n            onExit: options.onExit,\r\n\r\n            // Custom parent State\r\n            parent: options.parent,\r\n\r\n            // Custom data\r\n            data: options.data\r\n          };\r\n\r\n          // sdo's template\r\n          if (options.templateUrl) {\r\n            sdo.template = options.templateUrl;\r\n          } else if (options.templateProvider) {\r\n            sdo.template = undefined;\r\n          } else if (options.template) {\r\n            sdo.template = options.templateUrl;\r\n          }\r\n\r\n          // sdo's controller\r\n          if (userController) {\r\n            sdo.controller = userController;\r\n          }\r\n\r\n          // sdo's controllerAs\r\n          if (target.controllerAs) {\r\n            sdo.controllerAs = target.controllerAs;\r\n          } else if (options.controllerAs) {\r\n            sdo.controllerAs = options.controllerAs;\r\n          }\r\n\r\n          // Create the state\r\n          $stateProvider.state(options.name, sdo);\r\n\r\n          // When our automatic controller is used, we inject the resolved values into it,\r\n          // along with the injectable service that will be used to publish them.\r\n          // If the user supplied a controller than we do not inject anything\r\n          if (doResolve) {\r\n            deps.unshift(resolvedServiceName);\r\n\r\n            controller.$inject = deps;\r\n          }\r\n\r\n          // Populate the published service with the resolved values\r\n          function controller(...args) {\r\n            // This is the service that we \"unshifted\" earlier\r\n            localScope = args[0];\r\n\r\n            args = args.slice(1);\r\n\r\n            // Now we copy the resolved values to the service.\r\n            // This service can be injected into a component's constructor, for example.\r\n            deps.slice(1).forEach(function(v, i) {\r\n              localScope[v] = args[i];\r\n            });\r\n\r\n          }\r\n\r\n        }\r\n      ]);\r\n\r\n    return target;\r\n  };\r\n\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/state.js\n **/","import { common } from './../common';\r\nimport { SetModule } from './set-module';\r\n\r\n// Allow configuration of some angular2-now default settings\r\n// controllerAs: if provided, will user this string instead of component name, for example \"vm\"\r\nexport function options(options) {\r\n  if (!options) {\r\n    return common.ng2nOptions;\r\n  }\r\n\r\n  if (typeof options.controllerAs !== 'undefined') {\r\n    common.controllerAs = options.controllerAs;\r\n  }\r\n\r\n  // Optional spinner object can be registered. It must expose show() and hide() methods.\r\n  // The spinner will be activated before any I/O operations and deactivated once they complete.\r\n  common.ng2nOptions.spinner = options.spinner || {\r\n    show: angular.noop,\r\n    hide: angular.noop\r\n  };\r\n\r\n  // events expose beforeCall() and afterCall().\r\n  // beforeCall() will be called before any I/O operations.\r\n  // afterCall() will be called after any I/O operations have completed.\r\n  common.ng2nOptions.events = options.events || {\r\n    beforeCall: angular.noop,\r\n    afterCall: angular.noop\r\n  };\r\n\r\n  // The noConflict option allows us to control whether or not angular2-now\r\n  // monkey-patches angular.module.\r\n  //  true = don't monkey patch.\r\n  //  false = (default for versions < 0.4.0)  DO monkey patch angular.module\r\n  //          for backwards compatibility\r\n  if (typeof options.noConflict !== 'undefined') {\r\n    angular.module = options.noConflict ? common.angularModule : SetModule;\r\n  }\r\n}\r\n\r\nexport function Options(options) {\r\n  return function(target) {\r\n    angular.merge(common.ng2nOptions, options);\r\n    return target;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/options.js\n **/","import { common } from './../common';\r\n\r\n// The name of the Meteor.method is the same as the name of class method.\r\nexport function MeteorMethod(_options) {\r\n  const options = angular.merge({}, common.ng2nOptions, _options);\r\n  let spinner = options.spinner || {\r\n    show: angular.noop,\r\n    hide: angular.noop\r\n  };\r\n  const events = options.events || {\r\n    beforeCall: angular.noop,\r\n    afterCall: angular.noop\r\n  };\r\n\r\n  return function(target, name, descriptor) {\r\n\r\n    // Create a method that calls the back-end\r\n    descriptor.value = function() {\r\n      const argv = Array.prototype.slice.call(arguments);\r\n      const deferred = common.$q.defer();\r\n\r\n      if (typeof spinner === 'string') {\r\n        if (angular.injector(['ng', common.currentModule]).has(options.spinner)) {\r\n          spinner = angular.injector(['ng', common.currentModule]).get(options.spinner);\r\n          options.spinner = spinner;\r\n        } else\r\n          throw new Error('Spinner \"' + spinner + '\" does not exist.');\r\n      }\r\n\r\n      argv.unshift(name);\r\n      argv.push(resolver);\r\n\r\n      if (spinner) {\r\n        spinner.show();\r\n      }\r\n\r\n      if (events.beforeCall) {\r\n        events.beforeCall();\r\n      }\r\n      // Call optional events.beforeCall()\r\n\r\n      // todo: should call Meteor after resolution of promise returned by beforeCall()\r\n      Meteor.call.apply(this, argv);\r\n\r\n      deferred.promise.finally(function() {\r\n        spinner.hide();\r\n        // Call optional events.afterCall()\r\n        if (events.afterCall) {\r\n          events.afterCall();\r\n        }\r\n\r\n      });\r\n\r\n      return deferred.promise;\r\n\r\n      function resolver(err, data) {\r\n        if (err) {\r\n          deferred.reject(err);\r\n        } else {\r\n          deferred.resolve(data);\r\n        }\r\n      }\r\n    };\r\n\r\n    return descriptor;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/meteor-method.js\n **/"],"sourceRoot":""}