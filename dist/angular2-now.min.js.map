{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///dist/angular2-now.min.js","webpack:///webpack/bootstrap 59ed86e9ee53800edde9","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/angular2-now.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/common.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/set-module.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/component.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/view.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/inject.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/utils.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/scope-shared.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/scope-new.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/controller.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/service.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/filter.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/bootstrap.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/state.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/options.js","webpack:///C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/meteor-method.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","init","_common","common","isCordova","cordova","angularModule","angular","Object","defineProperty","value","_apiSetModule","_apiComponent","_apiScopeShared","_apiScopeNew","_apiView","_apiInject","_apiController","_apiService","_apiFilter","_apiBootstrap","_apiState","_apiOptions","_apiMeteorMethod","angular2now","SetModule","Component","Directive","ScopeShared","ScopeNew","View","Inject","Controller","Service","Filter","Injectable","bootstrap","State","options","Options","MeteorMethod","System","register","_export","i","setters","execute","undefined","currentModule","currentNameSpace","ng2nOptions","controllerAs","$q","injector","get","arguments","split","length","apply","selector","target","link","scope","el","attr","controllers","$dependson","slice","injectables","Array","_inject","services","_utils","camelCase","isClass","unCamelCase","template","templateUrl","transclude","directives","_view","requiredControllers","$inject","map","dep","test","push","filter","v","$injectDefer","ddo","restrict","hasOwnProperty","bindToController","controller","replace","require","directive","er","Error","transcludeContent","s","match","toLowerCase","indexOf","deps","prototype","name","descriptor","injectable","TypeError","existingInjects","forEach","nameSpace","concat","nsName","serviceExists","serviceName","getService","moduleName","_invokeQueue","a","b","toUpperCase","service","filterFunc","args","f","Function","bind","config","onReady","bootOnDocument","document","body","querySelector","bootModule","strictDi","Meteor","element","on","ready","doResolve","resolvedServiceName","resolves","resolve","keys","$urlRouterProvider","$stateProvider","$locationProvider","localScope","defaultRoute","otherwise","url","html5Mode","userController","sdo","params","abstract","templateProvider","onEnter","onExit","parent","data","state","unshift","spinner","show","noop","hide","events","beforeCall","afterCall","noConflict","_setModule","merge","_options","resolver","err","deferred","reject","argv","defer","has","promise"],"mappings":"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","file":"dist/angular2-now.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular2now\"] = factory();\n\telse\n\t\troot[\"angular2now\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angular2now\"] = factory();\n\telse\n\t\troot[\"angular2now\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/*!*****************************!*\\\n  !*** ./src/angular2-now.js ***!\n  \\*****************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _common = __webpack_require__(/*! ./common */ 1);\n\t\n\tvar _apiSetModule = __webpack_require__(/*! ./api/set-module */ 2);\n\t\n\tvar _apiComponent = __webpack_require__(/*! ./api/component */ 3);\n\t\n\tvar _apiScopeShared = __webpack_require__(/*! ./api/scope-shared */ 7);\n\t\n\tvar _apiScopeNew = __webpack_require__(/*! ./api/scope-new */ 8);\n\t\n\tvar _apiView = __webpack_require__(/*! ./api/view */ 4);\n\t\n\tvar _apiInject = __webpack_require__(/*! ./api/inject */ 5);\n\t\n\tvar _apiController = __webpack_require__(/*! ./api/controller */ 9);\n\t\n\tvar _apiService = __webpack_require__(/*! ./api/service */ 10);\n\t\n\tvar _apiFilter = __webpack_require__(/*! ./api/filter */ 11);\n\t\n\tvar _apiBootstrap = __webpack_require__(/*! ./api/bootstrap */ 12);\n\t\n\tvar _apiState = __webpack_require__(/*! ./api/state */ 13);\n\t\n\tvar _apiOptions = __webpack_require__(/*! ./api/options */ 14);\n\t\n\tvar _apiMeteorMethod = __webpack_require__(/*! ./api/meteor-method */ 15);\n\t\n\tvar angular2now = {\n\t    SetModule: _apiSetModule.SetModule,\n\t\n\t    Component: _apiComponent.Component,\n\t    Directive: _apiComponent.Component,\n\t    ScopeShared: _apiScopeShared.ScopeShared,\n\t    ScopeNew: _apiScopeNew.ScopeNew,\n\t    View: _apiView.View,\n\t    Inject: _apiInject.Inject,\n\t    Controller: _apiController.Controller,\n\t    Service: _apiService.Service,\n\t    Filter: _apiFilter.Filter,\n\t    Injectable: _apiService.Service,\n\t    bootstrap: _apiBootstrap.bootstrap,\n\t    State: _apiState.State,\n\t\n\t    options: _apiOptions.options,\n\t    Options: _apiOptions.Options,\n\t\n\t    MeteorMethod: _apiMeteorMethod.MeteorMethod\n\t};\n\t\n\tfunction init() {\n\t    _common.common.isCordova = typeof cordova !== 'undefined';\n\t\n\t    _common.common.angularModule = angular.module;\n\t\n\t    // Monkey patch angular.module\n\t    //angular.module = SetModule;\n\t}\n\t\n\tif (typeof System !== 'undefined' && System.register) {\n\t\n\t    System.register(\"angular2now\", [], function (_export) {\n\t\n\t        for (var i in angular2now) {\n\t            _export(i, angular2now[i]);\n\t        }return {\n\t            setters: [],\n\t            execute: function execute() {\n\t                init();\n\t            }\n\t        };\n\t    });\n\t} else {\n\t    init();\n\t}\n\t\n\texports['default'] = angular2now;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/*!***********************!*\\\n  !*** ./src/common.js ***!\n  \\***********************/\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar common = {\n\t  angularModule: undefined,\n\t  currentModule: undefined,\n\t  currentNameSpace: undefined,\n\t  isCordova: false,\n\t  ng2nOptions: {\n\t    currentModule: function currentModule() {\n\t      return common.currentModule;\n\t    }\n\t  },\n\t  controllerAs: undefined,\n\t  $q: angular.injector(['ng']).get('$q')\n\t};\n\texports.common = common;\n\n/***/ },\n/* 2 */\n/*!*******************************!*\\\n  !*** ./src/api/set-module.js ***!\n  \\*******************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.SetModule = SetModule;\n\t\n\tvar _common = __webpack_require__(/*! ./../common */ 1);\n\t\n\tfunction SetModule() {\n\t    /**\r\n\t     * Name-spacing applies to provider names, not modules. Each module\r\n\t     * has to have a unique name of it's own.\r\n\t     *\r\n\t     * A namespace may be specified like this:\r\n\t     *     SetModule('ftdesiree:helpers')\r\n\t     * The namespace, once set, will remain in force until removed.\r\n\t     * Remove the namespace like this:\r\n\t     *     angular.module(':helpers')\r\n\t     **/\n\t    _common.common.currentModule = arguments[0].split(':');\n\t\n\t    if (_common.common.currentModule.length === 1) {\n\t        // No namespace, just the module name\n\t        _common.common.currentModule = _common.common.currentModule[0];\n\t    } else {\n\t        // Split off the name-space and module name\n\t        _common.common.currentNameSpace = _common.common.currentModule[0];\n\t        _common.common.currentModule = _common.common.currentModule[1];\n\t\n\t        // Reassign arguments[0] without the namespace\n\t        arguments[0] = _common.common.currentModule;\n\t    }\n\t\n\t    return _common.common.angularModule.apply(angular, arguments);\n\t}\n\n/***/ },\n/* 3 */\n/*!******************************!*\\\n  !*** ./src/api/component.js ***!\n  \\******************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.Component = Component;\n\t\n\tvar _view = __webpack_require__(/*! ./view */ 4);\n\t\n\tvar _inject = __webpack_require__(/*! ./inject */ 5);\n\t\n\tvar _common = __webpack_require__(/*! ./../common */ 1);\n\t\n\tvar _utils = __webpack_require__(/*! ./../utils */ 6);\n\t\n\t//function Directive(options) {\n\t//\n\t//    // A string passed is assumed to be the attribute name of the directive.\n\t//    if (typeof options === 'string')\n\t//        options = { selector: options };\n\t//\n\t//    // Directives have shared scope by default (scope:undefined).\n\t//    // Optionally they can have a new scope created (scope: true).\n\t//    // If you require an isolate scope for your directive then\n\t//    // pass \"scope: { ... }\" in options.\n\t//    if (options && !options.hasOwnProperty('scope'))\n\t//        angular.merge(options, { scope: undefined });\n\t//\n\t//    return Component(options);\n\t//}\n\t\n\tfunction Component(options) {\n\t    options = options || {};\n\t    // Allow shorthand notation of just passing the selector name as a string\n\t    if (typeof options === 'string') options = { selector: options };\n\t\n\t    return function (target) {\n\t\n\t        // service injections, which could also have been specified by using @Inject\n\t        if (options.injectables && options.injectables instanceof Array) target = (0, _inject.Inject)(options.injectables)(target);\n\t        // injectables has been renamed to services\n\t        if (options.services && options.services instanceof Array) target = (0, _inject.Inject)(options.services)(target);\n\t\n\t        // Selector name may be prefixed with a '.', in which case \"restrict: 'C'\" will be used\n\t        options.selector = (0, _utils.camelCase)(options.selector || '') + '';\n\t        if (options.selector[0] === '.') {\n\t            var isClass = true;\n\t            options.selector = options.selector.slice(1);\n\t        }\n\t\n\t        // Save the unCamelCased selector name, so that bootstrap() can use it\n\t        target.selector = (0, _utils.unCamelCase)(options.selector);\n\t\n\t        // template options can be set with Component or with View\n\t        // so, we run View on the passed in options first.\n\t        if (options.template || options.templateUrl || options.transclude || options.directives) (0, _view.View)(options)(target);\n\t\n\t        // The template(Url) can also be passed in from the @View decorator\n\t        options.template = target.template || undefined;\n\t        options.templateUrl = target.templateUrl || undefined;\n\t\n\t        // Build the require array.\n\t        // Our controller needs the same injections as the component's controller,\n\t        // but with the \"@*\" injections renamed to \"$scope\". The link function will pass\n\t        // the \"@*\" injections directly to the component controller.\n\t        var requiredControllers = [options.selector];\n\t        target.$inject = target.$inject || [];\n\t        target.$inject = target.$inject.map(function (dep) {\n\t            if (/^@[^]{0,2}/.test(dep[0])) {\n\t                requiredControllers.push('?' + dep.slice(1));\n\t                dep = 'delete-me';\n\t            }\n\t            return dep;\n\t        });\n\t\n\t        // Remove all the 'delete-me' entries\n\t        target.$inject = target.$inject.filter(function (v) {\n\t            return v !== 'delete-me';\n\t        });\n\t\n\t        // Remember the original $inject, as it will be needed in the link function.\n\t        // In the link function we will receive any requested component controllers\n\t        // which we will then inject into the arguments that we will pass to the\n\t        // actual constructor of our component.\n\t        target.$injectDefer = target.$inject || [];\n\t\n\t        // Create the angular directive\n\t        var ddo = {\n\t            restrict: options.restrict || (options.template + options.templateUrl ? 'EA' : isClass ? 'C' : 'A'),\n\t            controllerAs: options.controllerAs || _common.common.controllerAs || target.controllerAs || options.selector,\n\t            scope: target.hasOwnProperty('scope') ? target.scope : options.hasOwnProperty('scope') ? options.scope : options['bind'] || {},\n\t            bindToController: typeof target.bindToController === 'boolean' ? target.bindToController : true,\n\t            template: options.template,\n\t            templateUrl: options.templateUrl,\n\t            controller: target,\n\t            replace: options.replace || false,\n\t            transclude: /ng-transclude/i.test(options.template) || target.transclude,\n\t            require: options.require || target.require || requiredControllers,\n\t            link: options.link || target.link || link\n\t        };\n\t\n\t        try {\n\t            angular.module(_common.common.currentModule).directive(options.selector, function () {\n\t                return ddo;\n\t            });\n\t        } catch (er) {\n\t            throw new Error('Does module \"' + _common.common.currentModule + '\" exist? You may need to use angular.module(\"youModuleName\").');\n\t        }\n\t\n\t        return target;\n\t\n\t        function link(scope, el, attr, controllers) {\n\t            // Create a service with the same name as the selector\n\t            // That holds a reference to our component\n\t            //angular.module(currentModule).value(camelCase(target.selector), controllers[0]);\n\t\n\t            // Alternate syntax for the injection of other component's controllers\n\t            if (controllers[0].$dependson) {\n\t                controllers[0].$dependson.apply(controllers[0], controllers.slice(1));\n\t            }\n\t        }\n\t    };\n\t}\n\n/***/ },\n/* 4 */\n/*!*************************!*\\\n  !*** ./src/api/view.js ***!\n  \\*************************/\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.View = View;\n\t\n\tfunction View(options) {\n\t    options = options || {};\n\t    // Allow shorthand notation of just passing the templateUrl as a string\n\t    if (typeof options === 'string') options = { templateUrl: options };\n\t\n\t    //if (!options.template) options.template = undefined;\n\t\n\t    return function (target) {\n\t        target.template = options.template || target.template;\n\t        target.templateUrl = options.templateUrl || target.templateUrl;\n\t\n\t        // When a templateUrl is specified in options, then transclude can also be specified\n\t        target.transclude = options.transclude || target.transclude;\n\t\n\t        // directives is an array of child directive controllers (Classes)\n\t        target.directives = options.directives || target.directives;\n\t\n\t        // Check for the new <content> tag and add ng-transclude to it, if not there.\n\t        if (target.template) target.template = transcludeContent(target.template);\n\t\n\t        return target;\n\t    };\n\t\n\t    // If template contains the new <content> tag then add ng-transclude to it.\n\t    // This will be picked up in @Component, where ddo.transclude will be set to true.\n\t    function transcludeContent(template) {\n\t        var s = (template || '').match(/\\<content[ >]([^\\>]+)/i);\n\t        if (s) {\n\t            if (s[1].toLowerCase().indexOf('ng-transclude') === -1) template = template.replace(/\\<content/i, '<content ng-transclude');\n\t        }\n\t        return template;\n\t    }\n\t}\n\n/***/ },\n/* 5 */\n/*!***************************!*\\\n  !*** ./src/api/inject.js ***!\n  \\***************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.Inject = Inject;\n\t\n\tvar _utils = __webpack_require__(/*! ./../utils */ 6);\n\t\n\t// 2015-09-01 Replaced the whole Inject function with a new more flexible version.\n\t// Thanks to Steven Weingärtner for his code, which works with both Classes and Methods,\n\t// as well as preserving injectables from a parent class (when extending a parent class).\n\t// New features:\n\t// - Dependencies can be passed in as arguments, not requiring the array wrapper. The\n\t//   original syntax with the array wrapper is still supported.\n\t// - Methods of a class can now be Injected also\n\t// - Child classes will inherit the parent class's injectables, which will be appended\n\t//   to the end of the child's dependencies\n\t\n\tfunction Inject() {\n\t    var deps;\n\t    if (arguments[0] instanceof Array) deps = arguments[0];else deps = Array.prototype.slice.call(arguments);\n\t\n\t    if (deps.length === 0) {\n\t        throw new Error('@Inject: No dependencies passed in');\n\t    }\n\t\n\t    return function (target, name, descriptor) {\n\t        var injectable = target;\n\t        if (descriptor) injectable = descriptor.value;\n\t\n\t        if (!injectable) throw new TypeError('@Inject can only be used with classes or class methods.');\n\t\n\t        var existingInjects = injectable.$inject;\n\t\n\t        injectable.$inject = [];\n\t\n\t        angular.forEach(deps, function (dep) {\n\t            // Namespace any injectables without an existing nameSpace prefix and also\n\t            // not already prefixed with '$', '@' or '@^'.\n\t            if (dep[0] !== '$' && dep[0] !== '@' && dep.indexOf('_') === -1) dep = (0, _utils.nameSpace)(dep);\n\t\n\t            if (injectable.$inject.indexOf(dep) === -1) {\n\t                injectable.$inject.push(dep);\n\t            }\n\t        });\n\t\n\t        if (existingInjects) {\n\t            injectable.$inject = injectable.$inject.concat(existingInjects);\n\t        }\n\t\n\t        return descriptor || target;\n\t    };\n\t}\n\n/***/ },\n/* 6 */\n/*!**********************!*\\\n  !*** ./src/utils.js ***!\n  \\**********************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.nameSpace = nameSpace;\n\texports.serviceExists = serviceExists;\n\texports.getService = getService;\n\texports.camelCase = camelCase;\n\texports.unCamelCase = unCamelCase;\n\t\n\tvar _common = __webpack_require__(/*! ./common */ 1);\n\t\n\t// Create a new name from the concatenation of\n\t// the currentNameSpace and the name argument\n\t\n\tfunction nameSpace(name) {\n\t    var nsName = name;\n\t\n\t    if (_common.common.currentNameSpace) {\n\t        //nsName = camelCase(currentModule) + '.' + name;\n\t        nsName = _common.common.currentNameSpace + '_' + name;\n\t    }\n\t\n\t    return nsName;\n\t}\n\t\n\t// Does a provider with a specific name exist in the current module\n\t\n\tfunction serviceExists(serviceName) {\n\t    return !!getService(serviceName);\n\t}\n\t\n\tfunction getService(serviceName, moduleName) {\n\t    if (!moduleName) moduleName = _common.common.currentModule;\n\t\n\t    return angular.module(moduleName)._invokeQueue.filter(function (v, i) {\n\t        return v[0] === '$provide' && v[2][0] === serviceName;\n\t    })[0];\n\t}\n\t\n\tfunction camelCase(s) {\n\t    return s.replace(/-(.)/g, function (a, b) {\n\t        return b.toUpperCase();\n\t    });\n\t}\n\t\n\tfunction unCamelCase(c) {\n\t    var s = c.replace(/([A-Z])/g, '-$1').replace(/--/g, '-').toLowerCase();\n\t    if (s[0] === '-') s = s.slice(1);\n\t    return s;\n\t}\n\n/***/ },\n/* 7 */\n/*!*********************************!*\\\n  !*** ./src/api/scope-shared.js ***!\n  \\*********************************/\n/***/ function(module, exports) {\n\n\t// Cancels out the automatic creation of isolate scope for the directive,\n\t// because Angular 1.x allows only one isolate scope directive per element.\n\t// This is useful when actually creating directives, which add behaviour\n\t// to an existing element, as opposed to components which are stand alone\n\t// bits of html and behaviour.\n\t// The other way to do this is to pass \"scope: undefined\" to @Component.\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.ScopeShared = ScopeShared;\n\t\n\tfunction ScopeShared(target) {\n\t    target.scope = undefined;\n\t    return target;\n\t}\n\n/***/ },\n/* 8 */\n/*!******************************!*\\\n  !*** ./src/api/scope-new.js ***!\n  \\******************************/\n/***/ function(module, exports) {\n\n\t// Requests a new scope to be created when the directive is created.\n\t// The other way to do this is to pass \"scope: true\" to @Component.\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.ScopeNew = ScopeNew;\n\t\n\tfunction ScopeNew(target) {\n\t    target.scope = true;\n\t    return target;\n\t}\n\n/***/ },\n/* 9 */\n/*!*******************************!*\\\n  !*** ./src/api/controller.js ***!\n  \\*******************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.Controller = Controller;\n\t\n\tvar _common = __webpack_require__(/*! ./../common */ 1);\n\t\n\tvar _utils = __webpack_require__(/*! ./../utils */ 6);\n\t\n\tfunction Controller(options) {\n\t    options = options || {};\n\t    // Allow shorthand notation of just passing the name as a string\n\t    if (typeof options === 'string') options = { name: options };\n\t\n\t    return function (target) {\n\t        angular.module(_common.common.currentModule).controller((0, _utils.nameSpace)(options.name), target);\n\t\n\t        return target;\n\t    };\n\t}\n\n/***/ },\n/* 10 */\n/*!****************************!*\\\n  !*** ./src/api/service.js ***!\n  \\****************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.Service = Service;\n\t\n\tvar _common = __webpack_require__(/*! ./../common */ 1);\n\t\n\tvar _utils = __webpack_require__(/*! ./../utils */ 6);\n\t\n\tfunction Service(options) {\n\t    options = options || {};\n\t    // Allow shorthand notation of just passing the name as a string\n\t    if (typeof options === 'string') options = { name: options };\n\t\n\t    return function (target) {\n\t        angular.module(_common.common.currentModule).service((0, _utils.nameSpace)(options.name), target);\n\t        //.factory(options.name, function () { return new target })\n\t\n\t        return target;\n\t    };\n\t}\n\n/***/ },\n/* 11 */\n/*!***************************!*\\\n  !*** ./src/api/filter.js ***!\n  \\***************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.Filter = Filter;\n\t\n\tvar _common = __webpack_require__(/*! ./../common */ 1);\n\t\n\tvar _utils = __webpack_require__(/*! ./../utils */ 6);\n\t\n\tfunction Filter(options) {\n\t    options = options || {};\n\t    // Allow shorthand notation of just passing the name as a string\n\t    if (typeof options === 'string') options = { name: options };\n\t\n\t    return function (target) {\n\t\n\t        filterFunc.$inject = target.$inject;\n\t\n\t        angular.module(_common.common.currentModule).filter((0, _utils.nameSpace)(options.name), filterFunc);\n\t\n\t        function filterFunc() {\n\t            var args = Array.prototype.slice.call(arguments);\n\t            var f = new (Function.prototype.bind.apply(target, [null].concat(args)))();\n\t            return f;\n\t        }\n\t\n\t        return target;\n\t    };\n\t}\n\n/***/ },\n/* 12 */\n/*!******************************!*\\\n  !*** ./src/api/bootstrap.js ***!\n  \\******************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.bootstrap = bootstrap;\n\t\n\tvar _common = __webpack_require__(/*! ./../common */ 1);\n\t\n\t/**\n\t * Bootstraps the Angular 1.x app.\n\t *\n\t * @param ?target   undefined | string | class\n\t *      undefined:  bootstraps on document and the current angular module\n\t *      string:     will use document.querySelector to find the element by this string\n\t *      class:      bootstraps on the component defined on this class, looks for selector\n\t *\n\t * @param ?config   angular.bootstrap() config object, see AngularJS doco\n\t */\n\t\n\tfunction bootstrap(target, config) {\n\t  if (!target || target && !target.selector && typeof target === 'function') {\n\t    target = {\n\t      selector: _common.common.currentModule\n\t    };\n\t    var bootOnDocument = true;\n\t  }\n\t\n\t  // Allow string shortcut for target.selector. Can be the name of any HTML tag.\n\t  if (typeof target === 'string') {\n\t    target = {\n\t      selector: target\n\t    };\n\t  }\n\t\n\t  // Mark this class as a bootstrap component. This allows @State\n\t  // to handle it correctly.\n\t  target.bootstrap = true;\n\t\n\t  var bootModule = target.selector || _common.common.currentModule;\n\t\n\t  if (bootModule !== _common.common.currentModule) angular.module(bootModule);\n\t\n\t  if (!config) config = {\n\t    strictDi: false\n\t  };\n\t\n\t  if (!Meteor) var Meteor = {};\n\t  if (_common.common.isCordova) angular.element(document).on(\"deviceready\", onReady);else angular.element(document).ready(onReady);\n\t\n\t  function onReady() {\n\t    // Find the component's element\n\t    if (!bootOnDocument) var el = document.querySelector(target.selector);\n\t    // Or use document, if user passed no arguments\n\t    else var el = document.body;\n\t\n\t    angular.bootstrap(el, [bootModule], config);\n\t  }\n\t}\n\n/***/ },\n/* 13 */\n/*!**************************!*\\\n  !*** ./src/api/state.js ***!\n  \\**************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports.State = State;\n\t\n\tvar _common = __webpack_require__(/*! ./../common */ 1);\n\t\n\tvar _utils = __webpack_require__(/*! ./../utils */ 6);\n\t\n\t/**\n\t * State can be used to annotate either a Component or a class and assign\n\t * a ui-router state to it.\n\t *\n\t * @param options   literal object\n\t *      name:              name of the state\n\t *      url:               url associated with this state\n\t *      template:          template\n\t *      templateUrl:       templateUrl\n\t *      templateProvider:  templateProvider\n\t *      defaultRoute:      truthy = .otherwise(url)\n\t *                         string = .otherwise(defaultRoute)\n\t *      resolve:           Literal object, see ui-router resolve\n\t *      abstract:          true/false\n\t *      params:            Literal object, see ui-router doco\n\t *      parent:            Define a custom parent state\n\t *      controller:        A controller is automatically assigned, but if you need\n\t *                         finer control then you can assign your own controller\n\t *      controllerAs:      Specify ControllerAs for cases when there is no\n\t *                         @Component used\n\t *\n\t * If a class is annotated then it is assumed to be the controller and\n\t * the state name will be used as the name of the injectable service\n\t * that will hold any resolves requested.\n\t *\n\t * When a component is annotated and resolves requested, then the component's\n\t * selector name is used as the name of the injectable service that holds\n\t * their values.\n\t */\n\t\n\tfunction State(options) {\n\t\n\t  if (!options || !(options instanceof Object) || options.name === undefined) throw new Error('@State: Valid options are: name, url, defaultRoute, template, templateUrl, templateProvider, resolve, abstract, parent, data.');\n\t\n\t  return function (target) {\n\t\n\t    var deps;\n\t    var resolvedServiceName = (0, _utils.nameSpace)((0, _utils.camelCase)(target.selector || (options.name + '').replace('.', '-')));\n\t\n\t    // Indicates if there is anything to resolve\n\t    var doResolve;\n\t\n\t    // Values to resolve can either be supplied in options.resolve or as a static method on the\n\t    // component's class\n\t    var resolves = options.resolve || target.resolve;\n\t\n\t    // Is there a resolve block?\n\t    if (resolves && resolves instanceof Object && (deps = Object.keys(resolves)).length) doResolve = true;\n\t\n\t    // Create an injectable value service to share the resolved values with the controller\n\t    // The service bears the same name as the component's camelCased selector name.\n\t    if (doResolve) {\n\t      if (!(0, _utils.serviceExists)(resolvedServiceName)) {\n\t        angular.module(_common.common.currentModule).value(resolvedServiceName, {});\n\t      }\n\t    }\n\t\n\t    // Configure the state\n\t    angular.module(_common.common.currentModule).config(['$urlRouterProvider', '$stateProvider', '$locationProvider', function ($urlRouterProvider, $stateProvider, $locationProvider) {\n\t\n\t      // Activate this state, if options.defaultRoute = true.\n\t      // If you don't want this then don't set options.defaultRoute to true\n\t      // and, instead, use $state.go inside the constructor to active a state.\n\t      // You can also pass a string to defaultRoute, which will become the default route.\n\t      if (options.defaultRoute) $urlRouterProvider.otherwise(typeof options.defaultRoute === 'string' ? options.defaultRoute : options.url);\n\t\n\t      // Optionally configure html5Mode\n\t      if (!(typeof options.html5Mode === 'undefined')) $locationProvider.html5Mode(options.html5Mode);\n\t\n\t      // The user can supply a controller through a parameter in options\n\t      // or the class itself can be used as the controller if no component is annotated.\n\t      var userController = options.controller || (!target.selector ? target : undefined);\n\t\n\t      // Also, de-namespace the resolve injectables for ui-router to inject correctly\n\t      if (userController && userController.$inject && userController.$inject.length && deps && deps.length) {\n\t        deps.forEach(function (dep) {\n\t          var i = userController.$inject.indexOf(_common.common.currentNameSpace + '_' + dep);\n\t          if (i !== -1) userController.$inject[i] = dep;\n\t        });\n\t      }\n\t\n\t      // This is the state definition object\n\t      var sdo = {\n\t        url: options.url,\n\t\n\t        // Default values for URL parameters can be configured here.\n\t        // ALso, parameters that do not appear in the URL can be configured here.\n\t        params: options.params,\n\t\n\t        // The State applied to a bootstrap component can be abstract,\n\t        // if you don't want that state to be able to activate.\n\t        abstract: options.abstract,\n\t\n\t        templateUrl: options.templateUrl,\n\t\n\t        // This is the \"inline\" template, as opposed to the templateUrl.\n\t        // 1) If either options.templateUrl or options.templateProvider is specified then\n\t        //      template will be set to undefined.\n\t        // 2) If options.template is provided then it will be used.\n\t        // 3) Otherwise, if this is a component, but not the bootstrap(**) component,\n\t        //    then we use it's selector to create the inline template \"<selector></selector>\".\n\t        // 4) Otherwise, we provide the following default template \"<div ui-view></div>\".\n\t        //(**) The bootstrap component will be rendered by Angular directly and must not\n\t        //     be rendered again by ui-router, or you will literally see it twice.\n\t        // todo: allow the user to specify their own div/span instead of forcing \"div(ui-view)\"\n\t        template: options.templateUrl || options.templateProvider ? undefined : options.template || ((target.template || target.templateUrl) && !target.bootstrap && target.selector ? target.selector.replace(/^(.*)$/, '<$1></$1>') : '<div ui-view=\"\"></div>'),\n\t\n\t        // The option for dynamically setting a template based on local values\n\t        //  or injectable services\n\t        templateProvider: options.templateProvider,\n\t\n\t        // Do we need to resolve stuff? If so, then we also provide a controller to catch the resolved data.\n\t        resolve: resolves,\n\t\n\t        // A user supplied controller OR\n\t        // An internally created proxy controller, if resolves were requested for a Component.\n\t        controller: userController || (doResolve ? controller : undefined),\n\t\n\t        // Optionally controllerAs can be specifically set for those situations,\n\t        // when we use @State on a class and there is no @Component defined.\n\t        controllerAs: target.controllerAs || options.controllerAs || (_common.common.ng2nOptions.hasOwnProperty('controllerAs') && !target.hasOwnProperty('selector') ? _common.common.ng2nOptions.controllerAs : undefined),\n\t\n\t        // onEnter and onExit events\n\t        onEnter: options.onEnter,\n\t        onExit: options.onExit,\n\t\n\t        // Custom parent State\n\t        parent: options.parent,\n\t\n\t        // Custom data\n\t        data: options.data\n\t      };\n\t\n\t      // Create the state\n\t      $stateProvider.state(options.name, sdo);\n\t\n\t      // When our automatic controller is used, we inject the resolved values into it,\n\t      // along with the injectable service that will be used to publish them.\n\t      // If the user supplied a controller than we do not inject anything\n\t      if (doResolve) {\n\t        deps.unshift(resolvedServiceName);\n\t\n\t        controller.$inject = deps;\n\t      }\n\t\n\t      // Populate the published service with the resolved values\n\t      function controller() {\n\t        var args = Array.prototype.slice.call(arguments);\n\t\n\t        // This is the service that we \"unshifted\" earlier\n\t        var localScope = args[0];\n\t\n\t        args = args.slice(1);\n\t\n\t        // Now we copy the resolved values to the service.\n\t        // This service can be injected into a component's constructor, for example.\n\t        deps.slice(1).forEach(function (v, i) {\n\t          localScope[v] = args[i];\n\t        });\n\t      }\n\t    }]);\n\t\n\t    return target;\n\t  };\n\t}\n\n/***/ },\n/* 14 */\n/*!****************************!*\\\n  !*** ./src/api/options.js ***!\n  \\****************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.options = options;\n\texports.Options = Options;\n\t\n\tvar _common = __webpack_require__(/*! ./../common */ 1);\n\t\n\tvar _setModule = __webpack_require__(/*! ./set-module */ 2);\n\t\n\t// Allow configuration of some angular2-now default settings\n\t// controllerAs: if provided, will user this string instead of component name, for example \"vm\"\n\t\n\tfunction options(options) {\n\t    if (!options) return _common.common.ng2nOptions;\n\t\n\t    if (typeof options.controllerAs !== 'undefined') {\n\t        _common.common.controllerAs = options.controllerAs;\n\t    }\n\t\n\t    // Optional spinner object can be registered. It must expose show() and hide() methods.\n\t    // The spinner will be activated before any I/O operations and deactivated once they complete.\n\t    _common.common.ng2nOptions.spinner = options.spinner || { show: angular.noop, hide: angular.noop };\n\t\n\t    // events expose beforeCall() and afterCall().\n\t    // beforeCall() will be called before any I/O operations.\n\t    // afterCall() will be called after any I/O operations have completed.\n\t    _common.common.ng2nOptions.events = options.events || { beforeCall: angular.noop, afterCall: angular.noop };\n\t\n\t    // The noConflict option allows us to control whether or not angular2-now\n\t    // monkey-patches angular.module.\n\t    //  true = don't monkey patch.\n\t    //  false = (default for versions < 0.4.0)  DO monkey patch angular.module\n\t    //          for backwards compatibility\n\t    if (typeof options.noConflict !== 'undefined') {\n\t        if (options.noConflict) angular.module = _common.common.angularModule;else angular.module = _setModule.SetModule;\n\t    }\n\t}\n\t\n\tfunction Options(options) {\n\t    return function (target) {\n\t        angular.merge(_common.common.ng2nOptions, options);\n\t        return target;\n\t    };\n\t}\n\n/***/ },\n/* 15 */\n/*!**********************************!*\\\n  !*** ./src/api/meteor-method.js ***!\n  \\**********************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\texports.MeteorMethod = MeteorMethod;\n\t\n\tvar _common = __webpack_require__(/*! ./../common */ 1);\n\t\n\t// The name of the Meteor.method is the same as the name of class method.\n\t\n\tfunction MeteorMethod(_options) {\n\t    var options = angular.merge({}, _common.common.ng2nOptions, _options);\n\t    var spinner = options.spinner || { show: angular.noop, hide: angular.noop };\n\t    var events = options.events || { beforeCall: angular.noop, afterCall: angular.noop };\n\t\n\t    return function (target, name, descriptor) {\n\t\n\t        // Create a method that calls the back-end\n\t        descriptor.value = function () {\n\t            var argv = Array.prototype.slice.call(arguments);\n\t            var deferred = _common.common.$q.defer();\n\t\n\t            if (typeof spinner === 'string') {\n\t                if (angular.injector(['ng', _common.common.currentModule]).has(options.spinner)) {\n\t                    spinner = angular.injector(['ng', _common.common.currentModule]).get(options.spinner);\n\t                    options.spinner = spinner;\n\t                } else throw new Error('Spinner \"' + spinner + '\" does not exist.');\n\t            }\n\t\n\t            argv.unshift(name);\n\t            argv.push(resolver);\n\t\n\t            if (spinner) spinner.show();\n\t            if (events.beforeCall) {\n\t                events.beforeCall();\n\t            }\n\t            // Call optional events.beforeCall()\n\t\n\t            // todo: should call Meteor after resolution of promise returned by beforeCall()\n\t            Meteor.call.apply(this, argv);\n\t\n\t            deferred.promise['finally'](function () {\n\t                spinner.hide();\n\t                // TODO @pbastowski, is it correct?\n\t                // was: options.events.afterCall();  // Call optional events.afterCall()\n\t                if (events.afterCall) {\n\t                    events.afterCall();\n\t                }\n\t            });\n\t\n\t            return deferred.promise;\n\t\n\t            function resolver(err, data) {\n\t                if (err) deferred.reject(err);else deferred.resolve(data);\n\t            }\n\t        };\n\t\n\t        return descriptor;\n\t    };\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** dist/angular2-now.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 59ed86e9ee53800edde9\n **/","import { common } from './common';\r\nimport { SetModule } from './api/set-module';\r\nimport { Component } from './api/component';\r\nimport { ScopeShared } from './api/scope-shared';\r\nimport { ScopeNew } from './api/scope-new';\r\nimport { View } from './api/view';\r\nimport { Inject } from './api/inject';\r\nimport { Controller } from './api/controller';\r\nimport { Service } from './api/service';\r\nimport { Filter } from './api/filter';\r\nimport { bootstrap } from './api/bootstrap';\r\nimport { State } from './api/state';\r\nimport { options, Options } from './api/options';\r\nimport { MeteorMethod } from './api/meteor-method';\r\n\r\nconst angular2now = {\r\n    SetModule: SetModule,\r\n\r\n    Component:   Component,\r\n    Directive:   Component,\r\n    ScopeShared: ScopeShared,\r\n    ScopeNew:    ScopeNew,\r\n    View:        View,\r\n    Inject:      Inject,\r\n    Controller:  Controller,\r\n    Service:     Service,\r\n    Filter:      Filter,\r\n    Injectable:  Service,\r\n    bootstrap:   bootstrap,\r\n    State:       State,\r\n\r\n    options: options,\r\n    Options: Options,\r\n\r\n    MeteorMethod: MeteorMethod\r\n};\r\n\r\nfunction init() {\r\n    common.isCordova = typeof cordova !== 'undefined';\r\n\r\n    common.angularModule = angular.module;\r\n\r\n    // Monkey patch angular.module\r\n    //angular.module = SetModule;\r\n}\r\n\r\nif (typeof System !== 'undefined' && System.register) {\r\n\r\n    System.register(\"angular2now\", [], function (_export) {\r\n\r\n        for (let i in angular2now)\r\n            _export(i, angular2now[i]);\r\n\r\n        return {\r\n            setters: [],\r\n            execute: function () {\r\n                init();\r\n            }\r\n        };\r\n\r\n    })\r\n} else {\r\n    init();\r\n}\r\n\r\nexport default angular2now;\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/angular2-now.js\n **/","export const common = {\n  angularModule: undefined,\n  currentModule: undefined,\n  currentNameSpace: undefined,\n  isCordova: false,\n  ng2nOptions: {\n    currentModule: function () {\n        return common.currentModule;\n    }\n  },\n  controllerAs: undefined,\n  $q: angular.injector(['ng']).get('$q')\n};\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/common.js\n **/","import { common } from './../common';\r\n\r\nexport function SetModule () {\r\n    /**\r\n     * Name-spacing applies to provider names, not modules. Each module\r\n     * has to have a unique name of it's own.\r\n     *\r\n     * A namespace may be specified like this:\r\n     *     SetModule('ftdesiree:helpers')\r\n     * The namespace, once set, will remain in force until removed.\r\n     * Remove the namespace like this:\r\n     *     angular.module(':helpers')\r\n     **/\r\n    common.currentModule = arguments[0].split(':');\r\n\r\n    if (common.currentModule.length === 1) {\r\n        // No namespace, just the module name\r\n        common.currentModule = common.currentModule[0];\r\n    } else {\r\n        // Split off the name-space and module name\r\n        common.currentNameSpace = common.currentModule[0];\r\n        common.currentModule = common.currentModule[1];\r\n\r\n        // Reassign arguments[0] without the namespace\r\n        arguments[0] = common.currentModule;\r\n    }\r\n\r\n    return common.angularModule.apply(angular, arguments);\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/set-module.js\n **/","import { View } from './view';\r\nimport { Inject } from './inject';\r\nimport { common } from './../common';\r\nimport { camelCase, unCamelCase } from './../utils';\r\n\r\n//function Directive(options) {\r\n//\r\n//    // A string passed is assumed to be the attribute name of the directive.\r\n//    if (typeof options === 'string')\r\n//        options = { selector: options };\r\n//\r\n//    // Directives have shared scope by default (scope:undefined).\r\n//    // Optionally they can have a new scope created (scope: true).\r\n//    // If you require an isolate scope for your directive then\r\n//    // pass \"scope: { ... }\" in options.\r\n//    if (options && !options.hasOwnProperty('scope'))\r\n//        angular.merge(options, { scope: undefined });\r\n//\r\n//    return Component(options);\r\n//}\r\n\r\nexport function Component(options) {\r\n    options = options || {};\r\n    // Allow shorthand notation of just passing the selector name as a string\r\n    if (typeof options === 'string')\r\n        options = { selector: options };\r\n\r\n    return function (target) {\r\n\r\n        // service injections, which could also have been specified by using @Inject\r\n        if (options.injectables && options.injectables instanceof Array)\r\n            target = Inject(options.injectables)(target);\r\n        // injectables has been renamed to services\r\n        if (options.services && options.services instanceof Array)\r\n            target = Inject(options.services)(target);\r\n\r\n        // Selector name may be prefixed with a '.', in which case \"restrict: 'C'\" will be used\r\n        options.selector = camelCase(options.selector || '') + '';\r\n        if (options.selector[0] === '.') {\r\n            var isClass = true;\r\n            options.selector = options.selector.slice(1);\r\n        }\r\n\r\n        // Save the unCamelCased selector name, so that bootstrap() can use it\r\n        target.selector = unCamelCase(options.selector);\r\n\r\n        // template options can be set with Component or with View\r\n        // so, we run View on the passed in options first.\r\n        if (options.template || options.templateUrl || options.transclude || options.directives)\r\n            View(options)(target);\r\n\r\n        // The template(Url) can also be passed in from the @View decorator\r\n        options.template = target.template || undefined;\r\n        options.templateUrl = target.templateUrl || undefined;\r\n\r\n        // Build the require array.\r\n        // Our controller needs the same injections as the component's controller,\r\n        // but with the \"@*\" injections renamed to \"$scope\". The link function will pass\r\n        // the \"@*\" injections directly to the component controller.\r\n        var requiredControllers = [options.selector];\r\n        target.$inject = target.$inject || [];\r\n        target.$inject = target.$inject.map(function(dep) {\r\n            if ( /^@[^]{0,2}/.test(dep[0]) ) {\r\n                requiredControllers.push('?' + dep.slice(1));\r\n                dep = 'delete-me'\r\n            }\r\n            return dep;\r\n        });\r\n\r\n        // Remove all the 'delete-me' entries\r\n        target.$inject = target.$inject.filter(function(v) { return v !== 'delete-me'; });\r\n\r\n        // Remember the original $inject, as it will be needed in the link function.\r\n        // In the link function we will receive any requested component controllers\r\n        // which we will then inject into the arguments that we will pass to the\r\n        // actual constructor of our component.\r\n        target.$injectDefer = target.$inject || [];\r\n\r\n        // Create the angular directive\r\n        var ddo = {\r\n            restrict:         options.restrict || ((options.template + options.templateUrl) ? 'EA' : isClass ? 'C' : 'A'),\r\n            controllerAs:     options.controllerAs || common.controllerAs || target.controllerAs || options.selector,\r\n            scope:            target.hasOwnProperty('scope') ? target.scope : options.hasOwnProperty('scope') ? options.scope : options['bind'] || {},\r\n            bindToController: typeof target.bindToController === 'boolean' ? target.bindToController : true,\r\n            template:         options.template,\r\n            templateUrl:      options.templateUrl,\r\n            controller:       target,\r\n            replace:          options.replace || false,\r\n            transclude:       /ng-transclude/i.test(options.template) || target.transclude,\r\n            require:          options.require || target.require || requiredControllers,\r\n            link:             options.link || target.link || link\r\n        };\r\n\r\n        try {\r\n            angular.module(common.currentModule)\r\n                .directive(options.selector, function () {\r\n                    return ddo;\r\n                });\r\n        } catch (er) {\r\n            throw new Error('Does module \"' + common.currentModule + '\" exist? You may need to use angular.module(\"youModuleName\").');\r\n        }\r\n\r\n        return target;\r\n\r\n        function link(scope, el, attr, controllers) {\r\n            // Create a service with the same name as the selector\r\n            // That holds a reference to our component\r\n            //angular.module(currentModule).value(camelCase(target.selector), controllers[0]);\r\n\r\n            // Alternate syntax for the injection of other component's controllers\r\n            if (controllers[0].$dependson) {\r\n                controllers[0].$dependson.apply(controllers[0], controllers.slice(1));\r\n            }\r\n        }\r\n    };\r\n\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/component.js\n **/","export function View(options) {\r\n    options = options || {};\r\n    // Allow shorthand notation of just passing the templateUrl as a string\r\n    if (typeof options === 'string')\r\n        options = { templateUrl: options };\r\n\r\n    //if (!options.template) options.template = undefined;\r\n\r\n    return function (target) {\r\n        target.template = options.template || target.template;\r\n        target.templateUrl = options.templateUrl || target.templateUrl;\r\n\r\n        // When a templateUrl is specified in options, then transclude can also be specified\r\n        target.transclude = options.transclude || target.transclude;\r\n\r\n        // directives is an array of child directive controllers (Classes)\r\n        target.directives = options.directives || target.directives;\r\n\r\n        // Check for the new <content> tag and add ng-transclude to it, if not there.\r\n        if (target.template)\r\n            target.template = transcludeContent(target.template);\r\n\r\n        return target;\r\n    };\r\n\r\n    // If template contains the new <content> tag then add ng-transclude to it.\r\n    // This will be picked up in @Component, where ddo.transclude will be set to true.\r\n    function transcludeContent(template) {\r\n        var s = (template || '').match(/\\<content[ >]([^\\>]+)/i);\r\n        if (s) {\r\n            if (s[1].toLowerCase().indexOf('ng-transclude') === -1)\r\n                template = template.replace(/\\<content/i, '<content ng-transclude');\r\n        }\r\n        return template;\r\n    }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/view.js\n **/","import { nameSpace } from './../utils';\r\n\r\n// 2015-09-01 Replaced the whole Inject function with a new more flexible version.\r\n// Thanks to Steven Weingärtner for his code, which works with both Classes and Methods,\r\n// as well as preserving injectables from a parent class (when extending a parent class).\r\n// New features:\r\n// - Dependencies can be passed in as arguments, not requiring the array wrapper. The\r\n//   original syntax with the array wrapper is still supported.\r\n// - Methods of a class can now be Injected also\r\n// - Child classes will inherit the parent class's injectables, which will be appended\r\n//   to the end of the child's dependencies\r\nexport function Inject() {\r\n    var deps;\r\n    if (arguments[0] instanceof Array)\r\n        deps = arguments[0];\r\n    else\r\n        deps = Array.prototype.slice.call(arguments);\r\n\r\n    if (deps.length === 0) {\r\n        throw new Error('@Inject: No dependencies passed in');\r\n    }\r\n\r\n    return function (target, name, descriptor) {\r\n        var injectable = target;\r\n        if (descriptor)\r\n            injectable = descriptor.value;\r\n\r\n        if (!injectable)\r\n            throw new TypeError('@Inject can only be used with classes or class methods.')\r\n\r\n         var existingInjects = injectable.$inject;\r\n\r\n        injectable.$inject = [];\r\n\r\n        angular.forEach(deps, function (dep) {\r\n            // Namespace any injectables without an existing nameSpace prefix and also\r\n            // not already prefixed with '$', '@' or '@^'.\r\n            if (dep[0] !== '$' && dep[0] !== '@' && dep.indexOf('_') === -1)\r\n                dep = nameSpace(dep);\r\n\r\n            if (injectable.$inject.indexOf(dep) === -1) {\r\n                injectable.$inject.push(dep);\r\n            }\r\n        });\r\n\r\n        if (existingInjects) {\r\n            injectable.$inject = injectable.$inject.concat(existingInjects);\r\n        }\r\n\r\n        return descriptor || target;\r\n    };\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/inject.js\n **/","import { common } from './common';\r\n\r\n// Create a new name from the concatenation of\r\n// the currentNameSpace and the name argument\r\nexport function nameSpace(name) {\r\n    var nsName = name;\r\n\r\n    if (common.currentNameSpace) {\r\n        //nsName = camelCase(currentModule) + '.' + name;\r\n        nsName = common.currentNameSpace + '_' + name;\r\n    }\r\n\r\n    return nsName;\r\n}\r\n\r\n// Does a provider with a specific name exist in the current module\r\nexport function serviceExists(serviceName) {\r\n    return !!getService(serviceName);\r\n}\r\n\r\nexport function getService(serviceName, moduleName) {\r\n    if (!moduleName)\r\n        moduleName = common.currentModule;\r\n\r\n    return angular.module(moduleName)\r\n        ._invokeQueue\r\n        .filter(function (v, i) {\r\n            return v[0] === '$provide' && v[2][0] === serviceName\r\n        })[0];\r\n}\r\n\r\nexport function camelCase(s) {\r\n    return s.replace(/-(.)/g, function (a, b) {\r\n        return b.toUpperCase();\r\n    });\r\n}\r\n\r\nexport function unCamelCase(c) {\r\n    var s = c.replace(/([A-Z])/g, '-$1')\r\n             .replace(/--/g, '-')\r\n             .toLowerCase();\r\n    if (s[0] === '-') s = s.slice(1);\r\n    return s;\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/utils.js\n **/","// Cancels out the automatic creation of isolate scope for the directive,\r\n// because Angular 1.x allows only one isolate scope directive per element.\r\n// This is useful when actually creating directives, which add behaviour\r\n// to an existing element, as opposed to components which are stand alone\r\n// bits of html and behaviour.\r\n// The other way to do this is to pass \"scope: undefined\" to @Component.\r\nexport function ScopeShared (target) {\r\n    target.scope = undefined;\r\n    return target\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/scope-shared.js\n **/","// Requests a new scope to be created when the directive is created.\r\n// The other way to do this is to pass \"scope: true\" to @Component.\r\nexport function ScopeNew (target) {\r\n    target.scope = true;\r\n    return target\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/scope-new.js\n **/","import { common } from './../common';\r\nimport { nameSpace } from './../utils';\r\n\r\nexport function Controller(options) {\r\n    options = options || {};\r\n    // Allow shorthand notation of just passing the name as a string\r\n    if (typeof options === 'string')\r\n        options = { name: options };\r\n\r\n    return function (target) {\r\n        angular.module(common.currentModule)\r\n            .controller(nameSpace(options.name), target);\r\n\r\n        return target;\r\n    };\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/controller.js\n **/","import { common } from './../common';\r\nimport { nameSpace } from './../utils';\r\nexport function Service(options) {\r\n    options = options || {};\r\n    // Allow shorthand notation of just passing the name as a string\r\n    if (typeof options === 'string')\r\n        options = { name: options };\r\n\r\n    return function (target) {\r\n        angular.module(common.currentModule)\r\n            .service(nameSpace(options.name), target);\r\n        //.factory(options.name, function () { return new target })\r\n\r\n        return target;\r\n    };\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/service.js\n **/","import { common } from './../common';\r\nimport { nameSpace } from './../utils';\r\n\r\nexport function Filter(options) {\r\n    options = options || {};\r\n    // Allow shorthand notation of just passing the name as a string\r\n    if (typeof options === 'string')\r\n        options = { name: options };\r\n\r\n    return function (target) {\r\n\r\n        filterFunc.$inject = target.$inject;\r\n\r\n        angular.module(common.currentModule)\r\n            .filter(nameSpace(options.name), filterFunc);\r\n\r\n        function filterFunc() {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var f = new (Function.prototype.bind.apply(target, [null].concat(args)));\r\n            return f;\r\n        }\r\n\r\n        return target;\r\n    };\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/filter.js\n **/","import { common } from './../common';\n\n/**\n * Bootstraps the Angular 1.x app.\n *\n * @param ?target   undefined | string | class\n *      undefined:  bootstraps on document and the current angular module\n *      string:     will use document.querySelector to find the element by this string\n *      class:      bootstraps on the component defined on this class, looks for selector\n *\n * @param ?config   angular.bootstrap() config object, see AngularJS doco\n */\nexport function bootstrap(target, config) {\n  if (!target || (target && !target.selector && typeof target === 'function')) {\n    target = {\n      selector: common.currentModule\n    };\n    var bootOnDocument = true;\n  }\n\n  // Allow string shortcut for target.selector. Can be the name of any HTML tag.\n  if (typeof target === 'string') {\n    target = {\n      selector: target\n    };\n  }\n\n  // Mark this class as a bootstrap component. This allows @State\n  // to handle it correctly.\n  target.bootstrap = true;\n\n  var bootModule = target.selector || common.currentModule;\n\n  if (bootModule !== common.currentModule)\n    angular.module(bootModule);\n\n  if (!config)\n    config = {\n      strictDi: false\n    };\n\n  if (!Meteor) var Meteor = {};\n  if (common.isCordova)\n    angular.element(document).on(\"deviceready\", onReady);\n  else\n    angular.element(document).ready(onReady);\n\n  function onReady() {\n    // Find the component's element\n    if (!bootOnDocument)\n      var el = document.querySelector(target.selector);\n    // Or use document, if user passed no arguments\n    else\n      var el = document.body;\n\n    angular.bootstrap(el, [bootModule], config);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/bootstrap.js\n **/","import {\n  common\n}\nfrom './../common';\nimport {\n  serviceExists, nameSpace, camelCase\n}\nfrom './../utils';\n\n/**\n * State can be used to annotate either a Component or a class and assign\n * a ui-router state to it.\n *\n * @param options   literal object\n *      name:              name of the state\n *      url:               url associated with this state\n *      template:          template\n *      templateUrl:       templateUrl\n *      templateProvider:  templateProvider\n *      defaultRoute:      truthy = .otherwise(url)\n *                         string = .otherwise(defaultRoute)\n *      resolve:           Literal object, see ui-router resolve\n *      abstract:          true/false\n *      params:            Literal object, see ui-router doco\n *      parent:            Define a custom parent state\n *      controller:        A controller is automatically assigned, but if you need\n *                         finer control then you can assign your own controller\n *      controllerAs:      Specify ControllerAs for cases when there is no\n *                         @Component used\n *\n * If a class is annotated then it is assumed to be the controller and\n * the state name will be used as the name of the injectable service\n * that will hold any resolves requested.\n *\n * When a component is annotated and resolves requested, then the component's\n * selector name is used as the name of the injectable service that holds\n * their values.\n */\nexport function State(options) {\n\n  if (!options || !(options instanceof Object) || options.name === undefined)\n    throw new Error('@State: Valid options are: name, url, defaultRoute, template, templateUrl, templateProvider, resolve, abstract, parent, data.');\n\n  return function(target) {\n\n    var deps;\n    var resolvedServiceName = nameSpace(camelCase(target.selector || (options.name + '').replace('.', '-')));\n\n    // Indicates if there is anything to resolve\n    var doResolve;\n\n    // Values to resolve can either be supplied in options.resolve or as a static method on the\n    // component's class\n    var resolves = options.resolve || target.resolve;\n\n    // Is there a resolve block?\n    if (resolves && resolves instanceof Object && (deps = Object.keys(resolves)).length)\n      doResolve = true;\n\n    // Create an injectable value service to share the resolved values with the controller\n    // The service bears the same name as the component's camelCased selector name.\n    if (doResolve) {\n      if (!serviceExists(resolvedServiceName)) {\n        angular.module(common.currentModule).value(resolvedServiceName, {});\n      }\n    }\n\n    // Configure the state\n    angular.module(common.currentModule)\n      .config(['$urlRouterProvider', '$stateProvider', '$locationProvider',\n        function($urlRouterProvider, $stateProvider, $locationProvider) {\n\n          // Activate this state, if options.defaultRoute = true.\n          // If you don't want this then don't set options.defaultRoute to true\n          // and, instead, use $state.go inside the constructor to active a state.\n          // You can also pass a string to defaultRoute, which will become the default route.\n          if (options.defaultRoute)\n            $urlRouterProvider.otherwise((typeof options.defaultRoute === 'string') ? options.defaultRoute : options.url);\n\n          // Optionally configure html5Mode\n          if (!(typeof options.html5Mode === 'undefined'))\n            $locationProvider.html5Mode(options.html5Mode);\n\n          // The user can supply a controller through a parameter in options\n          // or the class itself can be used as the controller if no component is annotated.\n          var userController = options.controller || (!target.selector ? target : undefined);\n\n          // Also, de-namespace the resolve injectables for ui-router to inject correctly\n          if (userController && userController.$inject && userController.$inject.length && deps && deps.length) {\n            deps.forEach(function(dep) {\n              var i = userController.$inject.indexOf(common.currentNameSpace + '_' + dep);\n              if (i !== -1)\n                userController.$inject[i] = dep;\n            });\n          }\n\n\n          // This is the state definition object\n          var sdo = {\n            url: options.url,\n\n            // Default values for URL parameters can be configured here.\n            // ALso, parameters that do not appear in the URL can be configured here.\n            params: options.params,\n\n            // The State applied to a bootstrap component can be abstract,\n            // if you don't want that state to be able to activate.\n            abstract: options.abstract,\n\n            templateUrl: options.templateUrl,\n\n            // This is the \"inline\" template, as opposed to the templateUrl.\n            // 1) If either options.templateUrl or options.templateProvider is specified then\n            //      template will be set to undefined.\n            // 2) If options.template is provided then it will be used.\n            // 3) Otherwise, if this is a component, but not the bootstrap(**) component,\n            //    then we use it's selector to create the inline template \"<selector></selector>\".\n            // 4) Otherwise, we provide the following default template \"<div ui-view></div>\".\n            //(**) The bootstrap component will be rendered by Angular directly and must not\n            //     be rendered again by ui-router, or you will literally see it twice.\n            // todo: allow the user to specify their own div/span instead of forcing \"div(ui-view)\"\n            template: options.templateUrl || options.templateProvider ? undefined : options.template || ((target.template || target.templateUrl) && !target.bootstrap && target.selector ? target.selector.replace(/^(.*)$/, '<$1></$1>') : '<div ui-view=\"\"></div>'),\n\n            // The option for dynamically setting a template based on local values\n            //  or injectable services\n            templateProvider: options.templateProvider,\n\n            // Do we need to resolve stuff? If so, then we also provide a controller to catch the resolved data.\n            resolve: resolves,\n\n            // A user supplied controller OR\n            // An internally created proxy controller, if resolves were requested for a Component.\n            controller: userController || (doResolve ? controller : undefined),\n\n            // Optionally controllerAs can be specifically set for those situations,\n            // when we use @State on a class and there is no @Component defined.\n            controllerAs: target.controllerAs || options.controllerAs || (common.ng2nOptions.hasOwnProperty('controllerAs') && !target.hasOwnProperty('selector') ? common.ng2nOptions.controllerAs : undefined),\n\n            // onEnter and onExit events\n            onEnter: options.onEnter,\n            onExit: options.onExit,\n\n            // Custom parent State\n            parent: options.parent,\n\n            // Custom data\n            data: options.data\n          };\n\n\n          // Create the state\n          $stateProvider.state(options.name, sdo);\n\n          // When our automatic controller is used, we inject the resolved values into it,\n          // along with the injectable service that will be used to publish them.\n          // If the user supplied a controller than we do not inject anything\n          if (doResolve) {\n            deps.unshift(resolvedServiceName);\n\n            controller.$inject = deps;\n          }\n\n          // Populate the published service with the resolved values\n          function controller() {\n            var args = Array.prototype.slice.call(arguments);\n\n            // This is the service that we \"unshifted\" earlier\n            var localScope = args[0];\n\n            args = args.slice(1);\n\n            // Now we copy the resolved values to the service.\n            // This service can be injected into a component's constructor, for example.\n            deps.slice(1).forEach(function(v, i) {\n              localScope[v] = args[i];\n            });\n\n          }\n\n        }\n      ]);\n\n    return target;\n  };\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/state.js\n **/","import { common } from './../common';\r\nimport { SetModule } from './set-module';\r\n\r\n// Allow configuration of some angular2-now default settings\r\n// controllerAs: if provided, will user this string instead of component name, for example \"vm\"\r\nexport function options(options) {\r\n    if (!options) return common.ng2nOptions;\r\n\r\n    if (typeof options.controllerAs !== 'undefined') {\r\n        common.controllerAs = options.controllerAs;\r\n    }\r\n\r\n    // Optional spinner object can be registered. It must expose show() and hide() methods.\r\n    // The spinner will be activated before any I/O operations and deactivated once they complete.\r\n    common.ng2nOptions.spinner = options.spinner || {show: angular.noop, hide: angular.noop};\r\n\r\n    // events expose beforeCall() and afterCall().\r\n    // beforeCall() will be called before any I/O operations.\r\n    // afterCall() will be called after any I/O operations have completed.\r\n    common.ng2nOptions.events = options.events || {beforeCall: angular.noop, afterCall: angular.noop};\r\n\r\n    // The noConflict option allows us to control whether or not angular2-now\r\n    // monkey-patches angular.module.\r\n    //  true = don't monkey patch.\r\n    //  false = (default for versions < 0.4.0)  DO monkey patch angular.module\r\n    //          for backwards compatibility\r\n    if (typeof options.noConflict !== 'undefined') {\r\n        if (options.noConflict)\r\n            angular.module = common.angularModule;\r\n        else\r\n            angular.module = SetModule;\r\n    }\r\n}\r\n\r\nexport function Options(options) {\r\n    return function(target) {\r\n        angular.merge(common.ng2nOptions, options);\r\n        return target;\r\n    }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/options.js\n **/","import { common } from './../common';\r\n\r\n\r\n// The name of the Meteor.method is the same as the name of class method.\r\nexport function MeteorMethod(_options) {\r\n    var options = angular.merge({}, common.ng2nOptions, _options);\r\n    var spinner = options.spinner || {show: angular.noop, hide: angular.noop};\r\n    var events = options.events || {beforeCall: angular.noop, afterCall: angular.noop};\r\n\r\n    return function (target, name, descriptor) {\r\n\r\n        // Create a method that calls the back-end\r\n        descriptor.value = function () {\r\n            var argv = Array.prototype.slice.call(arguments);\r\n            var deferred = common.$q.defer();\r\n\r\n            if (typeof spinner === 'string') {\r\n                if (angular.injector(['ng', common.currentModule]).has(options.spinner)) {\r\n                    spinner = angular.injector(['ng', common.currentModule]).get(options.spinner);\r\n                    options.spinner = spinner;\r\n                } else\r\n                    throw new Error('Spinner \"' + spinner + '\" does not exist.');\r\n            }\r\n\r\n            argv.unshift(name);\r\n            argv.push(resolver);\r\n\r\n            if (spinner) spinner.show();\r\n            if(events.beforeCall) {\r\n              events.beforeCall();\r\n            }\r\n            // Call optional events.beforeCall()\r\n\r\n            // todo: should call Meteor after resolution of promise returned by beforeCall()\r\n            Meteor.call.apply(this, argv);\r\n\r\n            deferred.promise.finally(function() {\r\n                spinner.hide();\r\n                // TODO @pbastowski, is it correct?\r\n                // was: options.events.afterCall();  // Call optional events.afterCall()\r\n                if(events.afterCall) {\r\n                  events.afterCall();\r\n                }\r\n\r\n            });\r\n\r\n            return deferred.promise;\r\n\r\n            function resolver(err, data) {\r\n                if (err)\r\n                    deferred.reject(err);\r\n                else\r\n                    deferred.resolve(data);\r\n            }\r\n        };\r\n\r\n        return descriptor;\r\n    }\r\n\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** C:/Users/mYsPC/Dropbox/Repozytoria/Forki/angular2-now/src/api/meteor-method.js\n **/"],"sourceRoot":""}